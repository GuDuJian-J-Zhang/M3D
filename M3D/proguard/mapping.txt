ht.svbase.command.OpenFileCommand -> ht.svbase.a.a:
    ht.svbase.views.SView sView -> e
    android.net.Uri uri -> f
    android.os.Handler myhandler -> a
    ht.svbase.model.io.SReader reader -> b
    void setUri(android.net.Uri) -> a
    void onAsyncExecute(java.lang.String[]) -> a
ht.svbase.command.OpenFileCommand$1 -> ht.svbase.a.b:
    android.app.ProgressDialog progressDialog -> a
    ht.svbase.command.OpenFileCommand this$0 -> b
    void handleMessage(android.os.Message) -> handleMessage
    ht.svbase.command.OpenFileCommand access$0(ht.svbase.command.OpenFileCommand$1) -> a
ht.svbase.command.OpenFileCommand$1$1 -> ht.svbase.a.c:
    ht.svbase.command.OpenFileCommand$1 this$1 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
ht.svbase.command.OpenFileCommand$2 -> ht.svbase.a.d:
    ht.svbase.command.OpenFileCommand this$0 -> a
    void onReadingHandle(ht.svbase.model.io.SReaderEvent) -> a
ht.svbase.command.SAsyncCommand -> ht.svbase.a.e:
    boolean isAsyncExecute() -> a
    void onAsyncExecute(java.lang.String[]) -> a
    void onExecute() -> b
ht.svbase.command.SCommand -> ht.svbase.a.f:
    int Cmd_Completed_Msg -> c
    int Cmd_Prompt_Msg -> d
    ht.svbase.command.SCommandManager cmdMng -> a
    boolean isAsyncExecute -> b
    java.util.List listeners -> e
    java.lang.String name -> f
    void addListener(ht.svbase.command.SCommandListener) -> a
    void close() -> c
    void execute() -> d
    ht.svbase.command.SCommandManager getManager() -> e
    java.lang.String getName() -> f
    boolean isAsyncExecute() -> a
    boolean onTouchHandle(java.lang.Object,android.view.MotionEvent) -> a
    void setManager(ht.svbase.command.SCommandManager) -> a
    void fireListener(int) -> a
    void onExecute() -> b
ht.svbase.command.SCommandListener -> ht.svbase.a.g:
    void onHandle(ht.svbase.command.SCommand,int) -> a
ht.svbase.command.SCommandManager -> ht.svbase.a.h:
    ht.svbase.command.SCommandListener cmdListener -> a
    java.util.List commandList -> b
    java.util.List historyList -> c
    ht.svbase.views.SView sview -> d
    ht.svbase.command.SCommand addCommand(ht.svbase.command.SCommand) -> a
    void complete(ht.svbase.command.SCommand) -> b
    ht.svbase.command.SCommand getCurCommand() -> a
    ht.svbase.views.SView getSView() -> b
    void setSView(ht.svbase.views.SView) -> a
    void innerRun(ht.svbase.command.SCommand) -> c
    void run(ht.svbase.command.SCommand) -> d
ht.svbase.command.SCommandManager$1 -> ht.svbase.a.i:
    ht.svbase.command.SCommandManager this$0 -> a
    void onHandle(ht.svbase.command.SCommand,int) -> a
ht.svbase.command.SCommandManager$AsyncExecuteCommandTask -> ht.svbase.a.j:
    ht.svbase.command.SCommand cmd -> b
    ht.svbase.command.SCommandManager this$0 -> a
    java.lang.String doInBackground(java.lang.String[]) -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
ht.svbase.command.SDiameterMeasureCommand -> ht.svbase.a.k:
    ht.svbase.model.SMeasureDiameterNote currentDiameterNote -> f
    int currentSelShapeID -> g
    ht.sview.dialog.ESelector eSelector -> h
    ht.sview.dialog.ESelector$onListener eselectorListener -> i
    int measureStep -> j
    int SelShapeID -> k
    void close() -> c
    void execute() -> d
    void access$0(ht.svbase.command.SDiameterMeasureCommand,int) -> a
    int access$1(ht.svbase.command.SDiameterMeasureCommand) -> a
    ht.svbase.model.SMeasureDiameterNote access$2(ht.svbase.command.SDiameterMeasureCommand) -> b
    int access$3(ht.svbase.command.SDiameterMeasureCommand) -> c
    void access$4(ht.svbase.command.SDiameterMeasureCommand,ht.svbase.model.SMeasureDiameterNote) -> a
    void access$5(ht.svbase.command.SDiameterMeasureCommand,int) -> b
    int access$6(ht.svbase.command.SDiameterMeasureCommand) -> d
    void access$7(ht.svbase.command.SDiameterMeasureCommand,int) -> c
ht.svbase.command.SDiameterMeasureCommand$1 -> ht.svbase.a.l:
    float lastX -> a
    float lastY -> b
    ht.svbase.command.SDiameterMeasureCommand this$0 -> c
    boolean onHandle(java.lang.Object,ht.sview.dialog.ESelector$ESelectorEvent) -> a
ht.svbase.command.SLineLengthMeasureCommand -> ht.svbase.a.m:
    ht.svbase.model.SMeasureLengthNote currentLengthNote -> f
    int currentSelShapeID -> g
    ht.sview.dialog.ESelector eSelector -> h
    ht.sview.dialog.ESelector$onListener eselectorListener -> i
    int measureStep -> j
    int SelShapeID -> k
    void close() -> c
    void execute() -> d
    boolean CreateOpera(android.view.MotionEvent) -> a
    boolean EditOpera(android.view.MotionEvent) -> b
    void access$0(ht.svbase.command.SLineLengthMeasureCommand,int) -> a
    int access$1(ht.svbase.command.SLineLengthMeasureCommand) -> a
    ht.svbase.model.SMeasureLengthNote access$2(ht.svbase.command.SLineLengthMeasureCommand) -> b
    int access$3(ht.svbase.command.SLineLengthMeasureCommand) -> c
    void access$4(ht.svbase.command.SLineLengthMeasureCommand,ht.svbase.model.SMeasureLengthNote) -> a
    void access$5(ht.svbase.command.SLineLengthMeasureCommand,int) -> b
    int access$6(ht.svbase.command.SLineLengthMeasureCommand) -> d
    void access$7(ht.svbase.command.SLineLengthMeasureCommand,int) -> c
ht.svbase.command.SLineLengthMeasureCommand$1 -> ht.svbase.a.n:
    float lastX -> a
    float lastY -> b
    ht.svbase.command.SLineLengthMeasureCommand this$0 -> c
    boolean onHandle(java.lang.Object,ht.sview.dialog.ESelector$ESelectorEvent) -> a
ht.svbase.command.SMeasureCommand -> ht.svbase.a.o:
    int noteID -> f
    int currentState -> g
    ht.sview.dialog.ESelector E1 -> h
    java.util.List measureNotes -> i
    ht.svbase.views.SView sView -> j
    int measureStep -> a
    ht.svbase.model.SNote note -> b
    ht.sview.dialog.ESelector$onListener eonListener -> e
    void close() -> c
    void execute() -> d
    java.util.List getMeasureNotes() -> g
    ht.svbase.views.SView getsView() -> h
    boolean onTouchHandle(java.lang.Object,android.view.MotionEvent) -> a
    void removeCurrentNote() -> i
    void undo() -> j
    boolean CreateOpera(android.view.MotionEvent) -> a
    boolean EditOpera(android.view.MotionEvent) -> b
    int getMeasureStep() -> k
    void onAsyncExecute(java.lang.String[]) -> a
    ht.svbase.views.SView access$0(ht.svbase.command.SMeasureCommand) -> a
ht.svbase.command.SMeasureCommand$1 -> ht.svbase.a.p:
    ht.svbase.views.SView tsView -> a
    ht.svbase.command.SMeasureCommand this$0 -> b
ht.svbase.command.SMeasureCommand$MeasureType -> ht.svbase.a.q:
    ht.svbase.command.SMeasureCommand$MeasureType MEASURE_DIAMETER -> a
    ht.svbase.command.SMeasureCommand$MeasureType MEASURE_LENGTH -> b
    ht.svbase.command.SMeasureCommand$MeasureType MEASURE_NONE -> c
    ht.svbase.command.SMeasureCommand$MeasureType MEASURE_RADIUS -> d
    int value -> e
    ht.svbase.command.SMeasureCommand$MeasureType[] ENUM$VALUES -> f
    int getValue() -> a
    ht.svbase.command.SMeasureCommand$MeasureType[] values() -> values
    ht.svbase.command.SMeasureCommand$MeasureType valueOf(java.lang.String) -> valueOf
ht.svbase.command.SRadiusMeasureCommand -> ht.svbase.a.r:
    ht.svbase.model.SMeasureRadiusNote currentRadiusNote -> f
    int currentSelShapeID -> g
    ht.sview.dialog.ESelector eSelector -> h
    ht.sview.dialog.ESelector$onListener eselectorListener -> i
    int measureStep -> j
    int SelShapeID -> k
    void close() -> c
    void execute() -> d
    void access$0(ht.svbase.command.SRadiusMeasureCommand,int) -> a
    int access$1(ht.svbase.command.SRadiusMeasureCommand) -> a
    ht.svbase.model.SMeasureRadiusNote access$2(ht.svbase.command.SRadiusMeasureCommand) -> b
    int access$3(ht.svbase.command.SRadiusMeasureCommand) -> c
    void access$4(ht.svbase.command.SRadiusMeasureCommand,ht.svbase.model.SMeasureRadiusNote) -> a
    void access$5(ht.svbase.command.SRadiusMeasureCommand,int) -> b
    int access$6(ht.svbase.command.SRadiusMeasureCommand) -> d
    void access$7(ht.svbase.command.SRadiusMeasureCommand,int) -> c
ht.svbase.command.SRadiusMeasureCommand$1 -> ht.svbase.a.s:
    float lastX -> a
    float lastY -> b
    ht.svbase.command.SRadiusMeasureCommand this$0 -> c
    boolean onHandle(java.lang.Object,ht.sview.dialog.ESelector$ESelectorEvent) -> a
ht.svbase.model.SBody -> ht.svbase.model.SBody:
    int type -> a
    java.util.List m_Edges -> b
    java.util.List m_Faces -> c
    ht.svbase.model.SMeshData meshData -> d
    ht.svbase.model.SMeshDrawData meshDrawData -> e
    void addEdge(ht.svbase.model.SEdge) -> addEdge
    void addFace(ht.svbase.model.SFace) -> addFace
    java.lang.Object clone(ht.svbase.model.SModel) -> a
    java.util.List getEdges() -> a
    java.util.List getFaces() -> b
    ht.svbase.model.SMeshData getMeshData() -> c
    ht.svbase.model.SMeshDrawData getMeshDrawData() -> d
    void preDisplayData() -> e
ht.svbase.model.SBox -> ht.svbase.model.a:
ht.svbase.model.SColor -> ht.svbase.model.b:
    float A -> a
    float B -> b
    float G -> c
    float R -> d
    java.lang.Object clone() -> clone
    void setColor(float,float,float,float) -> a
    void setColor(float[]) -> a
    float[] toFloats() -> a
ht.svbase.model.SEdge -> ht.svbase.model.c:
    float[] m_Box -> a
    java.util.List m_indexList -> b
    ht.svbase.model.SBody body -> c
    ht.svbase.model.SFace face -> d
    java.lang.Object clone(ht.svbase.model.SModel) -> a
    void setBody(ht.svbase.model.SBody) -> a
    void setFace(ht.svbase.model.SFace) -> a
ht.svbase.model.SFace -> ht.svbase.model.SFace:
    ht.svbase.model.SBody body -> a
    java.util.List mEdges -> b
    ht.svbase.model.SMeshData meshData -> c
    ht.svbase.model.SMeshDrawData meshDrawData -> d
    void addEdge(ht.svbase.model.SEdge) -> addEdge
    java.lang.Object clone(ht.svbase.model.SModel) -> a
    ht.svbase.model.SBody getBody() -> a
    java.util.List getEdges() -> b
    ht.svbase.model.SModel getModel() -> a_
    void preDisplayData() -> d
    void setBody(ht.svbase.model.SBody) -> a
    void setMeshDrawData(ht.svbase.model.SMeshDrawData) -> a
ht.svbase.model.SFileInfo -> ht.svbase.model.d:
    java.lang.String modelFile -> a
    java.util.ArrayList GetAllViewInfoXMLFile() -> a
    java.lang.String GetExplosivePath(java.lang.String) -> a
ht.svbase.model.SGeoAttribute -> ht.svbase.model.e:
ht.svbase.model.SGeoAttribute$GeoType -> ht.svbase.model.f:
    ht.svbase.model.SGeoAttribute$GeoType M3D_GEOATTR_TYPE_CONICALFACE -> a
    ht.svbase.model.SGeoAttribute$GeoType M3D_GEOATTR_TYPE_CYLINDERFACE -> b
    ht.svbase.model.SGeoAttribute$GeoType M3D_GEOATTR_TYPE_ELLIPSE -> c
    ht.svbase.model.SGeoAttribute$GeoType M3D_GEOATTR_TYPE_LINE -> d
    ht.svbase.model.SGeoAttribute$GeoType M3D_GEOATTR_TYPE_PLANEFACE -> e
    ht.svbase.model.SGeoAttribute$GeoType M3D_GEOATTR_TYPE_REVOLUTIONFACE -> f
    ht.svbase.model.SGeoAttribute$GeoType M3D_GEOATTR_TYPE_SPHEREFACE -> g
    ht.svbase.model.SGeoAttribute$GeoType M3D_GEOATTR_TYPE_TOROIDALFACE -> h
    ht.svbase.model.SGeoAttribute$GeoType M3D_GEOATTR_TYPE_UNKNOWN -> i
    int value -> j
    ht.svbase.model.SGeoAttribute$GeoType[] ENUM$VALUES -> k
    int getValue() -> a
    ht.svbase.model.SGeoAttribute$GeoType[] values() -> values
    ht.svbase.model.SGeoAttribute$GeoType valueOf(java.lang.String) -> valueOf
ht.svbase.model.SGraphicElement -> ht.svbase.model.g:
    ht.svbase.model.SColor color -> a
    int elementType -> b
    boolean selected -> c
    boolean useIndex -> d
    boolean visible -> e
    java.lang.Object clone() -> clone
    void setColor(float[]) -> a
    void setColor(ht.svbase.model.SColor) -> a
ht.svbase.model.SLine -> ht.svbase.model.h:
    int endArrowType -> a
    ht.svbase.model.SPoint endPoint -> b
    int startArrowType -> c
    ht.svbase.model.SPoint startPoint -> d
    int width -> e
    int getEndArrow() -> a
    ht.svbase.model.SPoint getEndPoint() -> b
    int getStartArrow() -> c
    ht.svbase.model.SPoint getStartPoint() -> d
    int getWidth() -> e
    void setEndArrow(int) -> a
    void setEndPoint(ht.svbase.model.SPoint) -> a
    void setStartArrow(int) -> b
    void setStartPoint(ht.svbase.model.SPoint) -> b
    void setWidth(int) -> c
    void init() -> f
ht.svbase.model.SMatrix -> ht.svbase.model.i:
    float[] EmptyMatrix -> a
    float[] UnitMatrix -> b
    float[] floatArray -> c
    float[] transposeFloatArray -> d
    ht.svbase.model.SMatrix fromArray(float[]) -> a
    float[] array() -> a
    ht.svbase.model.SMatrix multiMatrix(float[]) -> b
    ht.svbase.model.SMatrix multiMatrix(ht.svbase.model.SMatrix) -> a
    void setArray(float[]) -> c
ht.svbase.model.SMeasureDiameterNote -> ht.svbase.model.j:
ht.svbase.model.SMeasureLengthNote -> ht.svbase.model.k:
ht.svbase.model.SMeasureNote -> ht.svbase.model.l:
ht.svbase.model.SMeasureRadiusNote -> ht.svbase.model.m:
ht.svbase.model.SMeshData -> ht.svbase.model.n:
    java.util.List m_Indexs -> a
    java.util.List m_NormalIndexs -> b
    java.util.List m_Normals -> c
    java.util.List m_Points -> d
    ht.svbase.model.SShape shape -> e
    java.lang.Object clone() -> clone
    java.util.List getPoints() -> a
    boolean hasPointsData() -> b
    void setShape(ht.svbase.model.SShape) -> a
ht.svbase.model.SMeshDrawData -> ht.svbase.model.o:
    java.lang.Boolean useArrayStyle -> a
    float[] color -> b
    boolean hasColor -> c
    java.nio.ShortBuffer indexBuffer -> d
    int indexNum -> e
    java.lang.Boolean meshDataDirt -> f
    java.nio.FloatBuffer normalBuffer -> g
    int normalNum -> h
    java.nio.FloatBuffer pointBuffer -> i
    ht.svbase.model.SShape shape -> j
    int shapeType -> k
    java.nio.ShortBuffer triEdgeIndexBuffer -> l
    java.nio.FloatBuffer triEdgePointBuffer -> m
    void prepareDraw(ht.svbase.model.SMeshData) -> a
    void prepareDraw(ht.svbase.model.SMeshData,ht.svbase.model.SMeshData,ht.svbase.model.SMeshDrawData) -> a
    void setShape(ht.svbase.model.SShape) -> a
ht.svbase.model.SModel -> ht.svbase.model.SModel:
    boolean m_isRetainProtoType -> a
    float[] ModelMatrix -> b
    float[] MoveModelMatrix -> c
    ht.svbase.model.SMatrix aviPlaceMatrix -> f
    java.util.List bodyArray -> g
    ht.svbase.model.SFileInfo fileInfo -> h
    boolean hasColor -> i
    java.util.List meshDataIDArray -> j
    java.util.List noteList -> k
    ht.svbase.model.SModel parent -> l
    ht.svbase.model.SMatrix plcMtx -> m
    ht.svbase.model.SModel protoModel -> n
    int protoTypeID -> o
    ht.svbase.model.SBox selfbox -> p
    java.util.List subModelArray -> q
    java.util.List subModelIDArray -> r
    boolean useProtoType -> s
    java.util.List viewArray -> t
    boolean hasDisplayData -> d
    boolean isUpdataPlaceMtx -> e
    java.lang.String placePath -> u
    void addBody(ht.svbase.model.SBody) -> addBody
    void addNote(ht.svbase.model.SNote) -> a
    void addSubModel(ht.svbase.model.SModel) -> addSubModel
    void addView(ht.svbase.model.SModelView) -> a
    ht.svbase.model.SModelView addView(ht.svbase.model.SModelViewType) -> a
    java.lang.Object clone() -> clone
    java.util.List getBodies() -> a
    ht.svbase.model.SModel getParent() -> b
    java.lang.String getPlacePath() -> d
    void setPlacePath(java.lang.String) -> setPlacePath
    ht.svbase.model.SMatrix getPlaceMatrix() -> e
    ht.svbase.model.SModel getProtoType() -> f
    java.util.List getSubModels() -> g
    ht.svbase.model.SModelView getView(int) -> a
    java.util.List getViews() -> h
    boolean isAssemby() -> i
    void prepareDrawData() -> j
    void removeNote(int) -> b
    void removeView(int) -> c
    void removeView(ht.svbase.model.SModelView) -> b
    void setModleViews(int[],java.lang.String[]) -> setModleViews
    void setParent(ht.svbase.model.SModel) -> a
    void setSelected(boolean) -> a
    void setVisible(boolean,boolean) -> a
    void updataPlcMtx() -> s
    void obtainInstance() -> k
ht.svbase.model.SModelView -> ht.svbase.model.p:
    int MaxID -> a
    java.util.HashMap changedmodels -> b
    int id -> c
    boolean isSelected -> d
    boolean isVisible -> e
    ht.svbase.model.SMatrix matrix -> f
    ht.svbase.model.SModel model -> g
    java.lang.String name -> h
    java.util.List noteList -> i
    ht.svbase.model.SModelViewType viewType -> j
    void addNote(ht.svbase.model.SNote) -> a
    int getID() -> a
    ht.svbase.model.SMatrix getMatrix() -> b
    java.lang.String getName() -> c
    ht.svbase.model.SModelViewType getViewType() -> d
    void setId(int) -> a
    void setMatrix(ht.svbase.model.SMatrix) -> a
    void setModel(ht.svbase.model.SModel) -> a
    void setName(java.lang.String) -> a
    void setSelected(boolean) -> a
    void setViewType(ht.svbase.model.SModelViewType) -> a
    void setVisible(boolean) -> b
    void addChangedModels() -> e
    void addChangedModels(ht.svbase.model.SModel) -> b
ht.svbase.model.SModelViewType -> ht.svbase.model.q:
    ht.svbase.model.SModelViewType Base -> a
    ht.svbase.model.SModelViewType Custom -> b
    ht.svbase.model.SModelViewType GestureNote -> c
    ht.svbase.model.SModelViewType Note -> d
    ht.svbase.model.SModelViewType[] ENUM$VALUES -> e
    ht.svbase.model.SModelViewType[] values() -> values
    ht.svbase.model.SModelViewType valueOf(java.lang.String) -> valueOf
ht.svbase.model.SNote -> ht.svbase.model.r:
    java.util.List lineList -> a
    java.util.List planeList -> b
    java.util.List pointList -> c
    java.util.List polylineList -> d
    java.util.List textList -> e
    void addLine(ht.svbase.model.SLine) -> a
    void addPoint(ht.svbase.model.SPoint) -> a
    void addText(ht.svbase.model.SText) -> a
    void clear() -> a
    java.util.List getLineList() -> b
    java.util.List getPlaneList() -> d
    java.util.List getPointList() -> e
    java.util.List getPolylineList() -> f
    java.util.List getTextList() -> g
ht.svbase.model.SPlane -> ht.svbase.model.s:
    float A -> a
    float B -> b
    float C -> c
    float D -> d
    java.util.List edgeList -> e
    java.util.List pointList -> f
ht.svbase.model.SPoint -> ht.svbase.model.t:
    float[] XYZ -> a
    float[] array() -> a
    java.lang.Object clone() -> clone
    float[] getXYZ() -> b
    void setXYZ(float,float,float) -> a
    float X() -> c
    float Y() -> d
    float Z() -> e
    void init() -> f
ht.svbase.model.SPolyline -> ht.svbase.model.u:
    int linewidth -> a
    java.util.List pointArray -> b
    java.nio.FloatBuffer pointBuffer -> c
    int polylineType -> d
    java.util.List getPoints() -> a
ht.svbase.model.SProperties -> ht.svbase.model.v:
    java.util.Map mProperties -> a
    void AddProperty(java.lang.String,java.lang.String) -> a
    void clear() -> a
    java.util.Map getProperties() -> b
    boolean isEmpty() -> c
ht.svbase.model.SShape -> ht.svbase.model.SShape:
    ht.svbase.model.SColor color -> a
    int id -> b
    ht.svbase.model.SModel model -> c
    java.lang.String name -> d
    ht.svbase.model.SProperties properties -> e
    boolean selected -> f
    ht.svbase.model.SShape$ShapeType shapeType -> g
    boolean useIndex -> h
    boolean visible -> i
    java.lang.Object clone() -> clone
    ht.svbase.model.SColor getColor() -> l
    int getID() -> m
    ht.svbase.model.SModel getModel() -> a_
    java.lang.String getName() -> n
    ht.svbase.model.SProperties getProperties() -> o
    ht.svbase.model.SShape$ShapeType getShapeType() -> p
    boolean isSelected() -> q
    boolean isVisible() -> r
    void setColor(ht.svbase.model.SColor) -> a
    void setID(int) -> setID
    void setModel(ht.svbase.model.SModel) -> b
    void setName(java.lang.String) -> setName
    void setSelected(boolean) -> a
    void setShapeType(ht.svbase.model.SShape$ShapeType) -> a
    void setVisible(boolean) -> b
ht.svbase.model.SShape$ShapeType -> ht.svbase.model.w:
    ht.svbase.model.SShape$ShapeType CURVE_ELLIPSE -> a
    ht.svbase.model.SShape$ShapeType CURVE_HYPERBOLA -> b
    ht.svbase.model.SShape$ShapeType CURVE_LINE -> c
    ht.svbase.model.SShape$ShapeType CURVE_NURBSCURVE -> d
    ht.svbase.model.SShape$ShapeType CURVE_PARABOLA -> e
    ht.svbase.model.SShape$ShapeType CURVE_POLYLINE -> f
    ht.svbase.model.SShape$ShapeType CURVE_UNKNOWN -> g
    ht.svbase.model.SShape$ShapeType SHAPE_ANNOVATION -> h
    ht.svbase.model.SShape$ShapeType SHAPE_AXIS_HANDLE -> i
    ht.svbase.model.SShape$ShapeType SHAPE_BASE -> j
    ht.svbase.model.SShape$ShapeType SHAPE_BODY -> k
    ht.svbase.model.SShape$ShapeType SHAPE_EDGE -> l
    ht.svbase.model.SShape$ShapeType SHAPE_FACE -> m
    ht.svbase.model.SShape$ShapeType SHAPE_HANDLE -> n
    ht.svbase.model.SShape$ShapeType SHAPE_MEASURE_DIAMETER -> o
    ht.svbase.model.SShape$ShapeType SHAPE_MEASURE_LENGTH -> p
    ht.svbase.model.SShape$ShapeType SHAPE_MEASURE_NONE -> q
    ht.svbase.model.SShape$ShapeType SHAPE_MEASURE_RADIUS -> r
    ht.svbase.model.SShape$ShapeType SHAPE_MODEL -> s
    ht.svbase.model.SShape$ShapeType SHAPE_NOTE -> t
    ht.svbase.model.SShape$ShapeType SHAPE_PLANE_HANDLE -> u
    ht.svbase.model.SShape$ShapeType SHAPE_POINT_HANDLE -> v
    ht.svbase.model.SShape$ShapeType SHAPE_TEXT_ANNO -> w
    ht.svbase.model.SShape$ShapeType SHAPE_VERTEX -> x
    ht.svbase.model.SShape$ShapeType SHAPE_VOICEANNOT -> y
    int value -> z
    ht.svbase.model.SShape$ShapeType[] ENUM$VALUES -> A
    int getValue() -> a
    ht.svbase.model.SShape$ShapeType[] values() -> values
    ht.svbase.model.SShape$ShapeType valueOf(java.lang.String) -> valueOf
ht.svbase.model.SText -> ht.svbase.model.x:
    float fontSize -> a
    boolean isFixSize -> b
    boolean isFrontDisplay -> c
    ht.svbase.model.SPoint startPosition -> d
    java.lang.String text -> e
    java.lang.Object clone() -> clone
    float getFontSize() -> a
    ht.svbase.model.SPoint getStartPosition() -> b
    java.lang.String getText() -> c
    void setFontSize(float) -> a
ht.svbase.model.SVoiceNote -> ht.svbase.model.y:
    ht.svbase.model.SPoint position -> a
    java.lang.String voicefile -> b
    java.lang.String getVoicefile() -> h
    void setPosition(ht.svbase.model.SPoint) -> b
    void setVoicefile(java.lang.String) -> a
ht.svbase.model.io.SReader -> ht.svbase.model.a.a:
    boolean isCancel -> a
    boolean isNativeDisplay -> b
    boolean isPause -> c
    ht.svbase.model.SModel model -> d
    java.util.List readListeners -> e
    ht.svbase.views.SView sView -> f
    android.net.Uri uri -> g
    ht.svbase.model.io.SReader GetReader(java.lang.String,ht.svbase.views.SView) -> a
    ht.svbase.model.io.SReader GetReader(android.net.Uri,ht.svbase.views.SView) -> a
    void fireReadEvent(ht.svbase.model.io.SReaderEvent) -> a
    ht.svbase.model.SModel getModel() -> a
    ht.svbase.views.SView getsView() -> b
    android.net.Uri getUri() -> c
    boolean isCancel() -> d
    boolean isNativeDisplay() -> e
    void setCancel(boolean) -> a
    void setNativeDisplay(boolean) -> b
    void setOnReadListener(ht.svbase.model.io.SReader$OnListener) -> a
ht.svbase.model.io.SReader$OnListener -> ht.svbase.model.a.b:
    void onReadingHandle(ht.svbase.model.io.SReaderEvent) -> a
ht.svbase.model.io.SReaderEvent -> ht.svbase.model.a.c:
    java.lang.Object obj -> a
    int percent -> b
    java.lang.String sInfo -> c
    int status -> d
    int getPercent() -> a
    int getStatus() -> b
    void setStatus(int) -> a
ht.svbase.model.io.STLNativeReader -> ht.svbase.model.a.d:
    ht.svbase.model.SModel getModel() -> a
    void setCancel(boolean) -> a
ht.svbase.model.io.SVL2NativeReader -> ht.svbase.model.a.e:
    boolean isContainFace -> a
    java.util.Map modelArray -> b
    ht.svbase.model.SModel getModel() -> a
    void setCancel(boolean) -> a
ht.svbase.natives.AnimationNatives -> ht.svbase.natives.AnimationNatives:
    boolean animationContinuousPlay(int) -> a
    double animationGetTick(int) -> b
    boolean animationIsPlaying(int) -> c
    boolean animationOpen(ht.svbase.views.SView,java.lang.String,int) -> a
    boolean animationPlay(int) -> d
    boolean animationRewind(int) -> e
    boolean nativeAnimationContinuousPlay(int) -> nativeAnimationContinuousPlay
    double nativeAnimationGetTick(int) -> nativeAnimationGetTick
    boolean nativeAnimationIsPlaying(int) -> nativeAnimationIsPlaying
    boolean nativeAnimationOpen(ht.svbase.views.SView,java.lang.String,int) -> nativeAnimationOpen
    boolean nativeAnimationPlay(int) -> nativeAnimationPlay
    boolean nativeAnimationRewind(int) -> nativeAnimationRewind
ht.svbase.natives.MeasureNatives -> ht.svbase.natives.MeasureNatives:
    int createDiameterMeasureNote(int,float,float,int) -> a
    int createLineLenghtMeasureNote(int,float,float,int) -> b
    int createRadiusMeasureNote(int,float,float,int) -> c
    int nativeCreateDiameterMeasureNote(int,float,float,int) -> nativeCreateDiameterMeasureNote
    int nativeCreateLineLenghtMeasureNote(int,float,float,int) -> nativeCreateLineLenghtMeasureNote
    int nativeCreateRadiusMeasureNote(int,float,float,int) -> nativeCreateRadiusMeasureNote
ht.svbase.natives.Natives -> ht.svbase.natives.Natives:
    boolean isLoaded -> a
    java.lang.String nativeGetDataManagerVersion() -> nativeGetDataManagerVersion
    void setParameter(java.lang.String,java.lang.String,int) -> a
    void nativeSetParameter(java.lang.String,java.lang.String,int) -> nativeSetParameter
ht.svbase.natives.ReadNatives -> ht.svbase.natives.ReadNatives:
    void readerCancel(int) -> a
    void readerClose(int) -> b
    void readerGetMeshData(int,ht.svbase.model.SMeshDrawData,int) -> a
    void readerGetModel(int,ht.svbase.model.SModel,int) -> a
    void readerOpen(java.lang.String,boolean,int) -> a
    void nativeReaderCancel(int) -> nativeReaderCancel
    void nativeReaderClose(int) -> nativeReaderClose
    void nativeReaderGetMeshData(int,ht.svbase.model.SMeshDrawData,int) -> nativeReaderGetMeshData
    void nativeReaderGetModel(int,ht.svbase.model.SModel,int) -> nativeReaderGetModel
    void nativeReaderOpen(java.lang.String,boolean,int) -> nativeReaderOpen
ht.svbase.natives.SelectNatives -> ht.svbase.natives.SelectNatives:
    void add(ht.svbase.model.SShape,int) -> a
    void clear(int) -> a
    void remove(ht.svbase.model.SShape,int) -> b
    void selectShape(int,int) -> a
    void set(java.util.List,int) -> a
    void unSelectShape(int,int) -> b
    void nativeSelectSetAll(int,int[],int,int) -> nativeSelectSetAll
    void nativeSelectShape(int,int) -> nativeSelectShape
    void nativeUnSelectShape(int,int) -> nativeUnSelectShape
ht.svbase.natives.ViewNatives -> ht.svbase.natives.ViewNatives:
    int addHandler(float,float,float,ht.svbase.model.SShape$ShapeType,int) -> a
    int addNote(ht.svbase.model.SNote,ht.svbase.model.SShape$ShapeType,int) -> a
    void allowRedraw(boolean,int) -> a
    void changeModelView(int,int) -> a
    void clearClipPlane(int) -> a
    int createView(int) -> b
    void dragModel(float,float,float,float,int) -> a
    void getColor(int,ht.svbase.model.SShape$ShapeType,float[],int) -> a
    void GetModelAllViews(ht.svbase.model.SModel,int) -> a
    float[] getSelectedPoint(float,float,int) -> a
    void getShapeProperties(ht.svbase.model.SShape,int) -> a
    void LoadAllViewFromXML(java.lang.String,int) -> a
    int nativeSaveCurrentView(java.lang.String,java.lang.String,int) -> nativeSaveCurrentView
    void nativeSetModelTransparent(int,boolean,int) -> nativeSetModelTransparent
    void nativeSetModelVisible(int,boolean,boolean,int) -> nativeSetModelVisible
    boolean ObatainAuthorization(int) -> c
    void RemoveHandler(int,int) -> b
    void RemoveModelViewFromRootModel(int,int) -> c
    void RemoveShape(int,int) -> d
    void rendererInit(int) -> d
    void rendererRender(int) -> e
    void rendererResize(int,int,int) -> a
    void requestRedraw(int) -> f
    void restoreModel(ht.svbase.model.SModel,int) -> b
    void restoreView(int) -> g
    int SaveCurrentView(java.lang.String,java.lang.String,int) -> a
    int SelectShape(float,float,int,int,int) -> a
    void setClipPlane(int,float,boolean,boolean,int) -> a
    void setColor(int,ht.svbase.model.SShape$ShapeType,float[],int) -> b
    void SetDefaultRotateCenter(int) -> h
    void setDrawMode(int,int) -> e
    void setModelTransparent(ht.svbase.model.SModel,boolean,int) -> a
    void setModelVisible(ht.svbase.model.SModel,boolean,boolean,int) -> a
    void setPerspective(int,int) -> f
    boolean SetRotationCenter(float,float,int) -> b
    void setSectionEnable(boolean,int) -> b
    void setSelectType(ht.svbase.views.SelectType,int) -> a
    void TouchDown(float[],int,int) -> a
    void TouchMove(int,float[],int,int) -> a
    void TouchUp(float[],int,int) -> b
    void viewPause(int) -> i
    void viewResume(int) -> j
    int nativeAddHandle3f(float,float,float,int,int) -> nativeAddHandle3f
    void nativeAddLine(int,int,float[],float[],int,int,int,int) -> nativeAddLine
    int nativeAddNote(int,int) -> nativeAddNote
    void nativeAddPlane(int,int,float,float,float,float,int) -> nativeAddPlane
    void nativeAddPoint(int,int,float[],int) -> nativeAddPoint
    void nativeAddPolyLine(int,int,int,int,float[],int,int[]) -> nativeAddPolyLine
    void nativeAddText(int,int,float[],java.lang.String,float,int) -> nativeAddText
    void nativeAllowRedraw(boolean,int) -> nativeAllowRedraw
    void nativeChangeModelView(int,int) -> nativeChangeModelView
    void nativeClearClipPlane(int) -> nativeClearClipPlane
    int nativeCreateNewView(int) -> nativeCreateNewView
    void nativeDragModel(float,float,float,float,int) -> nativeDragModel
    void nativeGetModelAllViews(ht.svbase.model.SModel,int) -> nativeGetModelAllViews
    int nativeGetSelectedPoint(float,float,int,float[],int) -> nativeGetSelectedPoint
    void nativeGetShapeColor4f(int,int,float[],int) -> nativeGetShapeColor4f
    java.lang.String nativeGetShapeProperties(int,int) -> nativeGetShapeProperties
    void nativeLoadAllViewFromXML(java.lang.String,int) -> nativeLoadAllViewFromXML
    boolean nativeObtainAuthorization(int) -> nativeObtainAuthorization
    void nativeRemoveHandle(int,int) -> nativeRemoveHandle
    void nativeRemoveModelViewFromRootModel(int,int) -> nativeRemoveModelViewFromRootModel
    void nativeRemoveShape(int,int) -> nativeRemoveShape
    void nativeRendererInit(int) -> nativeRendererInit
    void nativeRendererRender(int) -> nativeRendererRender
    void nativeRendererRequestRedraw(int) -> nativeRendererRequestRedraw
    void nativeRendererResize(int,int,int) -> nativeRendererResize
    void nativeRestoreModle(int,int) -> nativeRestoreModle
    void nativeRestoreView(int) -> nativeRestoreView
    int nativeSelected(float,float,int,int,int) -> nativeSelected
    void nativeSetClipPlane(int,float,boolean,boolean,int) -> nativeSetClipPlane
    void nativeSetColor(int,int,float[],int) -> nativeSetColor
    boolean nativeSetRotationCenter(float,float,int) -> nativeSetRotationCenter
    void nativeSetSectionEnable(boolean,int) -> nativeSetSectionEnable
    void nativeTouchDown(float[],int,int) -> nativeTouchDown
    void nativeTouchMove(int,float[],int,int) -> nativeTouchMove
    void nativeTouchUp(float[],int,int) -> nativeTouchUp
    void nativeViewPause(int) -> nativeViewPause
    void nativeViewResume(int) -> nativeViewResume
    boolean nvativeSetDefaultRotateCenter(int) -> nvativeSetDefaultRotateCenter
    void nvativeSetDrawMode(int,int) -> nvativeSetDrawMode
    void nvativeSetPerspective(int,int) -> nvativeSetPerspective
    int nvativeSetSelectType(int,int) -> nvativeSetSelectType
ht.svbase.util.IntentHelper -> ht.svbase.b.a:
    boolean sendFile(android.content.Context,java.lang.String) -> a
    void openUrl(android.content.Context,java.lang.String) -> b
ht.svbase.util.Log -> ht.svbase.b.b:
    java.lang.String TAG -> a
    boolean isWirteFile -> b
    java.lang.String logfile -> c
    boolean mIsDebug -> d
    java.text.SimpleDateFormat myLogSdf -> e
    void Debug(java.lang.String) -> a
    void Err(java.lang.Exception) -> a
    void Err(java.lang.String) -> b
    void i(java.lang.String,java.lang.String) -> a
    void Info(java.lang.String) -> c
    void writeLogtoFile(java.lang.String,java.lang.String,java.lang.String) -> a
ht.svbase.util.ResUtil -> ht.svbase.b.c:
    int getDrawableId(android.content.Context,java.lang.String) -> a
    int getId(android.content.Context,java.lang.String) -> b
    int getLayoutId(android.content.Context,java.lang.String) -> c
    java.lang.String getTempPictureFile(android.content.Context) -> a
ht.svbase.util.SDCardHelper -> ht.svbase.b.d:
    boolean ExistSDCard() -> a
    java.lang.String getSDRootDir() -> b
ht.svbase.views.Configure -> ht.svbase.views.a:
    java.util.Set HistoryPaths -> a
    boolean IsShowPreview -> b
    ht.svbase.views.SViewParameters parameters -> c
    android.content.SharedPreferences sp -> d
    ht.svbase.views.SView sView -> e
    void addHistoryPath(java.lang.String) -> a
    ht.svbase.views.SViewParameters getParameters() -> a
    void load(android.content.SharedPreferences) -> a
    void save() -> b
    void setDefault() -> c
    void setParameters(ht.svbase.views.SViewParameters) -> a
    java.lang.String getHistoryPaths() -> d
    void saveCurrentProperties() -> e
ht.svbase.views.GLHelper -> ht.svbase.views.b:
    float[] sScratch -> a
    android.graphics.Bitmap getBitmap(javax.microedition.khronos.opengles.GL10,int,int,int,int) -> a
    boolean snapshot(javax.microedition.khronos.opengles.GL10,int,int,int,int,float,java.lang.String,android.graphics.Bitmap$CompressFormat) -> a
ht.svbase.views.IModelView -> ht.svbase.views.c:
    int newID -> j
    ht.svbase.views.NativeShapesManager nativeShapesManager -> k
    int nativeViewID -> l
    ht.svbase.views.PriSelector priSelector -> m
    int drawMode -> a
    int id -> b
    ht.svbase.views.Ssearch modelSearch -> c
    ht.svbase.views.Selector selector -> d
    ht.svbase.views.SelectType selectType -> e
    ht.svbase.model.SGeoAttribute$GeoType selGeoType -> f
    ht.svbase.model.SShape$ShapeType selShapeType -> g
    ht.svbase.model.SModel smodel -> h
    ht.svbase.views.SView sview -> i
    java.util.HashMap modelMap -> n
    int addHandle(ht.svbase.model.SPoint,ht.svbase.model.SShape$ShapeType) -> a
    int addNote(ht.svbase.model.SNote,ht.svbase.model.SShape$ShapeType) -> a
    boolean aviPlay() -> a
    void aviStop() -> b
    void clearClipPlane() -> c
    void close() -> d
    ht.svbase.model.SMeasureDiameterNote createMeasureDiameterNote(int,float,float) -> a
    ht.svbase.model.SMeasureLengthNote createMeasureLineLengthNote(int,float,float) -> b
    ht.svbase.model.SMeasureRadiusNote createMeasureRadiusNote(int,float,float) -> c
    void fitWindow() -> e
    int getDrawMode() -> getDrawMode
    int getID() -> getID
    ht.svbase.model.SModel getModel() -> getModel
    ht.svbase.views.NativeShapesManager getNativeObjectManager() -> getNativeObjectManager
    int getNativeViewID() -> getNativeViewID
    ht.svbase.views.PriSelector getPriSelector() -> getPriSelector
    ht.svbase.views.SScene getScene() -> getScene
    ht.svbase.views.Ssearch getSearch() -> getSearch
    ht.svbase.views.Selector getSelector() -> getSelector
    ht.svbase.model.SPoint getSelectPoint(float,float) -> a
    ht.svbase.views.SelectType getSelectType() -> getSelectType
    ht.svbase.model.SGeoAttribute$GeoType getSelGeoType() -> getSelGeoType
    ht.svbase.model.SShape$ShapeType getSelShapeType() -> getSelShapeType
    int getShape(float,float) -> b
    ht.svbase.model.SColor getShapeColor(int,ht.svbase.model.SShape$ShapeType) -> a
    boolean getSnapshot() -> getSnapshot
    ht.svbase.views.SView getSView() -> getSView
    void onDestroy() -> f
    void open(android.net.Uri) -> a
    int priSelectShape(float,float) -> c
    void refresh() -> g
    void removeShape(int) -> a
    void removeShape(ht.svbase.model.SShape) -> a
    void restoreModel(ht.svbase.model.SModel) -> a
    void restoreView() -> h
    void selectShape(int) -> b
    void setClipPlane(int,float,boolean,boolean) -> a
    void setDedaultRotateCenter() -> i
    void setDragMode(boolean) -> setDragMode
    void setDrawMode(int) -> setDrawMode
    void setModel(ht.svbase.model.SModel) -> setModel
    void setModelDataChanged(boolean) -> setModelDataChanged
    void setModelTransparent(ht.svbase.model.SModel,boolean) -> a
    void setModelVisible(ht.svbase.model.SModel,boolean,boolean) -> a
    void setNativeObjectManager(ht.svbase.views.NativeShapesManager) -> setNativeObjectManager
    void setNativeViewID(int) -> setNativeViewID
    void setPerspective(int) -> setPerspective
    void setPriSelector(ht.svbase.views.PriSelector) -> setPriSelector
    void setSceneDataChanged(boolean) -> setSceneDataChanged
    void setSectionEnable(boolean) -> setSectionEnable
    void setSelectType(ht.svbase.views.SelectType) -> setSelectType
    void setSelGeoType(ht.svbase.model.SGeoAttribute$GeoType) -> setSelGeoType
    void setSelShapeType(ht.svbase.model.SShape$ShapeType) -> setSelShapeType
    void setShapeColor(int,ht.svbase.model.SShape$ShapeType,ht.svbase.model.SColor) -> a
    void showModleView(ht.svbase.model.SModelView) -> a
    void unSelectShape(int) -> c
    ht.svbase.model.SShape$ShapeType getShapeTypeFromSelType(ht.svbase.views.SelectType) -> a
    void Initialize() -> j
    java.util.HashMap getModelMap() -> getModelMap
    void AddToModelMap(ht.svbase.model.SModel) -> b
ht.svbase.views.IModelView$1 -> ht.svbase.views.d:
    ht.svbase.views.IModelView this$0 -> a
    void onHandle(ht.svbase.command.SCommand,int) -> a
ht.svbase.views.IModelView$2 -> ht.svbase.views.e:
    ht.svbase.views.IModelView this$0 -> a
    void onHandle(java.lang.Object,int) -> a
ht.svbase.views.MeasureManager -> ht.svbase.views.f:
    java.util.Map commandsMap -> a
    ht.svbase.command.SMeasureCommand currentCommand -> b
    ht.svbase.command.SMeasureCommand$MeasureType measureCommandType -> c
    ht.svbase.views.SView sView -> d
    int[] $SWITCH_TABLE$ht$svbase$command$SMeasureCommand$MeasureType -> e
    void closeAllCommand() -> a
    void excuateCmmand(ht.svbase.command.SMeasureCommand$MeasureType) -> a
    ht.svbase.command.SMeasureCommand$MeasureType getMeasureCommandType() -> b
    void undo() -> c
    ht.svbase.command.SMeasureCommand getCommand(ht.svbase.command.SMeasureCommand$MeasureType) -> b
    int[] $SWITCH_TABLE$ht$svbase$command$SMeasureCommand$MeasureType() -> d
ht.svbase.views.NativeShapesManager -> ht.svbase.views.g:
    java.util.Map objectsMap -> a
    void addShape(int,ht.svbase.model.SShape) -> a
    void initial(ht.svbase.model.SModel) -> a
    void removeShape(int) -> a
    ht.svbase.model.SShape getShape(int) -> b
ht.svbase.views.PriSelector -> ht.svbase.views.h:
    int currentSelectShapeID -> a
    ht.svbase.model.SGeoAttribute$GeoType priSelGeoType -> b
    ht.svbase.model.SShape$ShapeType priSelType -> c
    ht.svbase.views.SView sView -> d
    int priSelectShape(float,float,ht.svbase.model.SShape$ShapeType,ht.svbase.model.SGeoAttribute$GeoType) -> a
ht.svbase.views.Rotation -> ht.svbase.views.i:
    float DELTA_AXIS -> a
    float DELTA_ROT -> b
    ht.svbase.views.Vector axis -> c
ht.svbase.views.S3DNativeView -> ht.svbase.views.j:
    boolean clickflag -> m
    android.view.GestureDetector gestureDetector -> n
    int nativeViewID -> o
    android.graphics.PointF pinchStartPoint -> p
    float previousX -> q
    float previousY -> r
    ht.svbase.views.SelectFitCenter selectFitCenter -> s
    ht.svbase.views.SViewGestureListener sViewGestureListener -> t
    int touchMode -> u
    boolean waitDouble -> v
    ht.svbase.views.SScene scene -> j
    ht.svbase.views.S3DNativeViewRenderer sRenderer -> k
    float[] points -> l
    int addHandle(ht.svbase.model.SPoint,ht.svbase.model.SShape$ShapeType) -> a
    int addNote(ht.svbase.model.SNote,ht.svbase.model.SShape$ShapeType) -> a
    void allowRedraw(boolean) -> a
    boolean aviPlay() -> a
    void aviStop() -> b
    void clearClipPlane() -> c
    void clickHandle(float,float) -> d
    void close() -> d
    ht.svbase.model.SMeasureDiameterNote createMeasureDiameterNote(int,float,float) -> a
    ht.svbase.model.SMeasureLengthNote createMeasureLineLengthNote(int,float,float) -> b
    ht.svbase.model.SMeasureRadiusNote createMeasureRadiusNote(int,float,float) -> c
    void dragModel(float,float,float,float) -> a
    void fitWindow() -> e
    ht.svbase.views.SScene getScene() -> getScene
    ht.svbase.model.SPoint getSelectPoint(float,float) -> a
    int getShape(float,float) -> b
    ht.svbase.model.SColor getShapeColor(int,ht.svbase.model.SShape$ShapeType) -> a
    boolean getSnapshot() -> getSnapshot
    int getTouchMode() -> getTouchMode
    boolean onCommandTouchHandle(java.lang.Object,android.view.MotionEvent) -> a
    void onDestroy() -> f
    void onPause() -> onPause
    void onResume() -> onResume
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void open(android.net.Uri) -> a
    int priSelectShape(float,float) -> c
    void refresh() -> g
    void removeShape(int) -> a
    void removeShape(ht.svbase.model.SShape) -> a
    void restoreModel(ht.svbase.model.SModel) -> a
    void restoreView() -> h
    void selectShape(float,float) -> e
    void selectShape(int) -> b
    void setClipPlane(int,float,boolean,boolean) -> a
    void setDedaultRotateCenter() -> i
    void setDragMode(boolean) -> setDragMode
    void setDrawMode(int) -> setDrawMode
    void setModel(ht.svbase.model.SModel) -> setModel
    void setModelDataChanged(boolean) -> setModelDataChanged
    void setModelTransparent(ht.svbase.model.SModel,boolean) -> a
    void setModelVisible(ht.svbase.model.SModel,boolean,boolean) -> a
    void setPerspective(int) -> setPerspective
    void setSceneDataChanged(boolean) -> setSceneDataChanged
    void setSectionEnable(boolean) -> setSectionEnable
    void setSelectType(ht.svbase.views.SelectType) -> setSelectType
    void setShapeColor(int,ht.svbase.model.SShape$ShapeType,ht.svbase.model.SColor) -> a
    void setTouchMode(int) -> setTouchMode
    void showModleView(ht.svbase.model.SModelView) -> a
    void unSelectShape(int) -> c
    android.graphics.PointF getPinchCenterPoint(android.view.MotionEvent) -> a
    void init(boolean,int,int) -> a
ht.svbase.views.S3DNativeView20 -> ht.svbase.views.k:
    boolean isInitial -> m
    void checkEglError(java.lang.String,javax.microedition.khronos.egl.EGL10) -> b
    void init(boolean,int,int) -> a
    void access$0(java.lang.String,javax.microedition.khronos.egl.EGL10) -> a
ht.svbase.views.S3DNativeView20$ContextFactory -> ht.svbase.views.l:
    int EGL_CONTEXT_CLIENT_VERSION -> a
    javax.microedition.khronos.egl.EGLContext createContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig) -> createContext
    void destroyContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext) -> destroyContext
ht.svbase.views.S3DNativeViewConfigChooser -> ht.svbase.views.m:
    int EGL_OPENGL_ES2_BIT -> g
    int[] s_configAttribs2 -> h
    int[] mValue -> i
    int mAlphaSize -> a
    int mBlueSize -> b
    int mDepthSize -> c
    int mGreenSize -> d
    int mRedSize -> e
    int mStencilSize -> f
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay) -> chooseConfig
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[]) -> a
    int findConfigAttrib(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int) -> a
ht.svbase.views.S3DNativeViewRenderer -> ht.svbase.views.n:
    ht.svbase.model.SModel model -> a
    int nativeViewID -> b
    ht.svbase.views.S3DNativeView sview -> c
    void onDrawFrame(javax.microedition.khronos.opengles.GL10) -> onDrawFrame
    void onSurfaceChanged(javax.microedition.khronos.opengles.GL10,int,int) -> onSurfaceChanged
    void onSurfaceCreated(javax.microedition.khronos.opengles.GL10,javax.microedition.khronos.egl.EGLConfig) -> onSurfaceCreated
    void requestRedraw() -> a
    void setModel(ht.svbase.model.SModel) -> a
ht.svbase.views.SModelDrawMode -> ht.svbase.views.o:
    int OnlyShowTrilateralEdge -> a
    int ShowBox -> b
    int ShowPMI -> c
    int ShowTrilateralEdge -> d
    int Solid -> e
    int SolidAndWire -> f
    int Transparent -> g
    int WireFrame -> h
ht.svbase.views.SScene -> ht.svbase.views.p:
    java.nio.FloatBuffer AxisLineBuffer -> a
    ht.svbase.model.SColor backColor1 -> b
    ht.svbase.model.SColor backColor2 -> c
    java.nio.FloatBuffer backColorBuffer -> d
    java.nio.ShortBuffer backIndexBuffer -> e
    java.nio.FloatBuffer backNormalBuffer -> f
    java.nio.FloatBuffer backVertexBuffer -> g
    ht.svbase.views.SScene$Camera camera -> h
    float currentScale -> i
    float far -> j
    boolean getPic -> k
    java.nio.FloatBuffer gridLineBuffer -> l
    int height -> m
    float[] modelPriViewMatix -> n
    float[] modelViewMatix -> o
    float near -> p
    float[] projectionMatix -> q
    ht.svbase.views.Rotation rotation -> r
    float tempScale -> s
    int[] viewPort -> t
    int width -> u
    float[] clipPlane -> v
    boolean isShowClip -> w
    java.lang.Boolean showAxis -> x
    java.lang.Boolean showGrid -> y
    ht.svbase.views.IModelView view -> z
ht.svbase.views.SScene$Camera -> ht.svbase.views.q:
    float X -> a
    float Y -> b
    float Z -> c
    ht.svbase.views.SScene this$0 -> d
ht.svbase.views.SView -> ht.svbase.views.SView:
    java.lang.String aviFile -> b
    ht.svbase.command.SCommandManager commandManage -> c
    ht.svbase.views.Configure configure -> d
    android.content.Context context -> e
    int deviceType -> f
    ht.svbase.model.SFileInfo fileInfo -> g
    boolean isShowTitlebar -> h
    boolean isShowToolbar -> i
    boolean isStartAvi -> j
    java.util.List listeners -> k
    ht.svbase.views.MeasureManager measureMgr -> l
    java.lang.String modelFile -> m
    ht.svbase.views.IModelView modelView -> n
    int nativeViewID -> o
    java.lang.String previewFile -> p
    ht.svbase.views.SViewTitlebar titlebar -> q
    ht.svbase.views.SViewToolbar toolbar -> r
    java.lang.String version -> s
    android.os.Handler myhandler -> a
    int addHandle(ht.svbase.model.SPoint,ht.svbase.model.SShape$ShapeType) -> a
    void addListener(ht.svbase.views.SViewListener) -> a
    ht.svbase.model.SModelView addModelView(ht.svbase.model.SModelViewType) -> a
    int addNote(ht.svbase.model.SNote,ht.svbase.model.SShape$ShapeType) -> a
    double aviGetPosition() -> a
    boolean aviIsPlaing() -> b
    void aviPause() -> c
    boolean aviPlay() -> d
    void aviStop() -> e
    void aviSwitchLoopMode() -> f
    void clearClipPlane() -> g
    void close() -> h
    void fireEvent(ht.svbase.views.SViewEvent) -> a
    void fitWindow() -> i
    java.lang.String getAviFile() -> getAviFile
    ht.svbase.command.SCommandManager getCommandManager() -> getCommandManager
    ht.svbase.views.Configure getConfigure() -> getConfigure
    android.view.ViewGroup getContentLayout() -> getContentLayout
    int getDrawMode() -> getDrawMode
    ht.svbase.model.SFileInfo getFileInfo() -> getFileInfo
    java.util.List getListeners() -> getListeners
    ht.svbase.views.MeasureManager getMeasureMgr() -> getMeasureMgr
    ht.svbase.model.SModel getModel() -> getModel
    java.util.HashMap getModelMap() -> getModelMap
    java.lang.String getModelFile() -> getModelFile
    ht.svbase.views.IModelView getModelView() -> getModelView
    int getNativeViewID() -> getNativeViewID
    java.lang.String getPreviewFile() -> getPreviewFile
    ht.svbase.views.SScene getScene() -> getScene
    ht.svbase.views.Selector getSelector() -> getSelector
    ht.svbase.model.SPoint getSelectPoint(float,float) -> a
    ht.svbase.views.SelectType getSelectType() -> getSelectType
    int getShape(float,float) -> b
    ht.svbase.model.SColor getShapeColor(int,ht.svbase.model.SShape$ShapeType) -> a
    ht.svbase.views.SViewTitlebar getTitlebar() -> getTitlebar
    ht.svbase.views.SViewToolbar getToolbar() -> getToolbar
    java.lang.String getVersion() -> getVersion
    boolean isPhoneDevice() -> j
    boolean isShowTitle() -> k
    boolean isShowToolbar() -> l
    void onDestroy() -> m
    void onPause() -> n
    void onResume() -> o
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void open(android.net.Uri) -> a
    int priSelectShape(int,int) -> a
    void refresh() -> p
    void reLayout() -> q
    void removeModelView(int) -> a
    void removeShape(int) -> b
    void restoreModel(ht.svbase.model.SModel) -> a
    void restoreView() -> r
    void setAviFile(java.lang.String) -> setAviFile
    void setClipPlane(int,float,boolean,boolean) -> a
    void setDedaultRotateCenter() -> s
    void setDragMode(boolean) -> setDragMode
    void setDrawMode(int) -> setDrawMode
    void setListeners(java.util.List) -> setListeners
    void setMeasureMgr(ht.svbase.views.MeasureManager) -> setMeasureMgr
    void setModelTransparent(ht.svbase.model.SModel,boolean) -> a
    void setModelVisible(ht.svbase.model.SModel,boolean,boolean) -> a
    void setNativeViewID(int) -> setNativeViewID
    void setPerspective(int) -> setPerspective
    void setSectionEnable(boolean) -> setSectionEnable
    void setSelectType(ht.svbase.views.SelectType) -> setSelectType
    void setShapeColor(int,ht.svbase.model.SShape$ShapeType,ht.svbase.model.SColor) -> a
    void showMessage(java.lang.String) -> a
    void showModleView(ht.svbase.model.SModelView,boolean) -> a
    void showTitle(boolean) -> a
    java.lang.String snapShot() -> t
    java.lang.String snapShot(java.lang.String) -> b
    void init() -> u
    void setModelViewParent() -> v
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    java.util.List access$0(ht.svbase.views.SView) -> a
ht.svbase.views.SView$1 -> ht.svbase.views.r:
    ht.svbase.views.SView this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
ht.svbase.views.SViewEvent -> ht.svbase.views.s:
    int msg -> a
    java.lang.Object obj -> b
    int getMsg() -> a
    void setMsg(int) -> a
ht.svbase.views.SViewGestureListener -> ht.svbase.views.t:
    int TouchType -> b
    ht.svbase.views.S3DNativeView view -> c
    int step -> a
    boolean onDoubleTap(android.view.MotionEvent) -> onDoubleTap
    boolean onDoubleTapEvent(android.view.MotionEvent) -> onDoubleTapEvent
    boolean onDown(android.view.MotionEvent) -> onDown
    boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onFling
    void onLongPress(android.view.MotionEvent) -> onLongPress
    boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onScroll
    void onShowPress(android.view.MotionEvent) -> onShowPress
    boolean onSingleTapConfirmed(android.view.MotionEvent) -> onSingleTapConfirmed
    boolean onSingleTapUp(android.view.MotionEvent) -> onSingleTapUp
    void setTouchType(int) -> a
ht.svbase.views.SViewListener -> ht.svbase.views.u:
    void onHandle(ht.svbase.views.SView,ht.svbase.views.SViewEvent) -> a
ht.svbase.views.SViewParameters -> ht.svbase.views.v:
    ht.svbase.model.SColor BackBottomColor -> e
    ht.svbase.model.SColor BackTopColor -> f
    ht.svbase.model.SColor DefaultEdgeColor -> g
    ht.svbase.model.SColor DefaultNoteColor -> h
    ht.svbase.model.SColor DefaultPointColor -> i
    boolean IsNoteFixSize -> j
    boolean IsNoteFrontDisplay -> k
    int OpenGLESVersion -> l
    boolean IsSnapshot -> a
    java.lang.String SnapShotFile -> b
    android.graphics.Bitmap$CompressFormat SnapShotFormat -> c
    float SnapShotScale -> d
    boolean AllowSelect -> m
    float Alpha -> n
    ht.svbase.model.SColor BoxColor -> o
    ht.svbase.model.SColor ClipPlaneColor -> p
    ht.svbase.model.SColor DefaultFaceColor -> q
    ht.svbase.model.SColor DefaultPMIColor -> r
    int gestureMode -> s
    boolean IsConRotate -> t
    boolean IsDebug -> u
    boolean isHighPerformanceView -> v
    boolean IsMulSelect -> w
    boolean IsOnlyShowTrilateralEdge -> x
    boolean IsPMIFixSize -> y
    boolean IsPMIFrontDisplay -> z
    boolean IsShowAxis -> A
    boolean IsShowAxisText -> B
    boolean IsShowBox -> C
    boolean IsShowClipEdge -> D
    boolean IsShowClipPlane -> E
    boolean IsShowFPS -> F
    boolean IsShowGrid -> G
    boolean IsShowModelEdge -> H
    boolean IsShowNotes -> I
    boolean IsShowPMI -> J
    boolean IsShowShadow -> K
    boolean IsShowTrilateralEdge -> L
    boolean IsUseLOD -> M
    boolean IsUseVBO -> N
    int ProjectMode -> O
    int RemoveMode -> P
    int RemoveSize -> Q
    ht.svbase.model.SColor SelectedColor -> R
    ht.svbase.model.SColor TrilateralEdgColor -> S
    boolean UseBackImage -> T
    boolean UseBoxMoving -> U
    ht.svbase.views.SView view -> V
    ht.svbase.model.SColor getBackBottomColor() -> a
    ht.svbase.model.SColor getBackTopColor() -> b
    ht.svbase.model.SColor getDefaultEdgeColor() -> c
    ht.svbase.model.SColor getDefaultNoteColor() -> d
    ht.svbase.model.SColor getDefaultPointColor() -> e
    int getOpenGLESVersion() -> f
    boolean isNoteFixSize() -> g
    boolean isNoteFrontDisplay() -> h
    void setOpenGLESVersion(int) -> a
    float getAlpha() -> i
    ht.svbase.model.SColor getDefaultFaceColor() -> j
    int getGestureMode() -> k
    int getRemoveMode() -> l
    int getRemoveSize() -> m
    boolean isAllowSelect() -> n
    boolean isConRotate() -> o
    boolean isDebug() -> p
    boolean isHighPerformanceView() -> q
    boolean isMulSelect() -> r
    boolean isPMIFixSize() -> s
    boolean isPMIFrontDisplay() -> t
    boolean isShowAxis() -> u
    boolean isShowAxisText() -> v
    boolean isShowBox() -> w
    boolean isShowClipPlane() -> x
    boolean isShowFPS() -> y
    boolean isShowGrid() -> z
    boolean IsShowModelEdge() -> A
    boolean isShowNotes() -> B
    boolean isShowPMI() -> C
    boolean isShowShadow() -> D
    boolean isShowTrilateralEdge() -> E
    boolean isUseBackImage() -> F
    boolean isUseBoxMoving() -> G
    boolean isUseLOD() -> H
    boolean isUseVBO() -> I
    void setAllowSelect(boolean) -> a
    void setAlpha(float) -> a
    void setConRotate(boolean) -> b
    void setDebug(boolean) -> c
    void setDefault() -> J
    void setGestureMode(int) -> b
    void setHighPerformanceView(boolean) -> d
    void setMulSelect(boolean) -> e
    void setNativeParameter(java.lang.String,boolean) -> a
    void setNativeParameter(java.lang.String,int) -> a
    void setNativeParameter(java.lang.String,java.lang.String) -> a
    void setNativeParameters() -> K
    void setNoteFixSize(boolean) -> f
    void setNoteFrontDisplay(boolean) -> g
    void setPMIFixSize(boolean) -> h
    void setPMIFrontDisplay(boolean) -> i
    void setRemoveMode(int) -> c
    void setRemoveSize(int) -> d
    void setShowAxis(boolean) -> j
    void setShowAxisText(boolean) -> k
    void setShowBox(boolean) -> l
    void setShowClipPlane(boolean) -> m
    void setShowFPS(boolean) -> n
    void setShowGrid(boolean) -> o
    void setShowModelEdge(boolean) -> p
    void setShowNotes(boolean) -> q
    void setShowPMI(boolean) -> r
    void setShowShadow(boolean) -> s
    void setShowTrilateralEdge(boolean) -> t
    void setsView(ht.svbase.views.SView) -> a
    void setUseBackImage(boolean) -> u
    void setUseBoxMoving(boolean) -> v
    void setUseLOD(boolean) -> w
    void setUseVBO(boolean) -> x
ht.svbase.views.SViewTitlebar -> ht.svbase.views.w:
    ht.svbase.views.SView sview -> a
    android.widget.TextView textView -> b
    void clear() -> a
    ht.svbase.views.SView getSiew() -> getSiew
    java.lang.String getTitle() -> getTitle
    android.widget.TextView getView() -> getView
    void init() -> b
    void setTitle(java.lang.String) -> setTitle
ht.svbase.views.SViewToolbar -> ht.svbase.views.x:
    java.util.List itemList -> a
    ht.svbase.views.SView sview -> b
    ht.svbase.views.SView getSiew() -> getSiew
    java.util.List getToolbarItems() -> getToolbarItems
    void init() -> a
    void setToolbar() -> b
    void initItems() -> c
    java.util.List access$0(ht.svbase.views.SViewToolbar) -> a
    ht.svbase.views.SView access$1(ht.svbase.views.SViewToolbar) -> b
ht.svbase.views.SViewToolbar$1 -> ht.svbase.views.y:
    ht.svbase.views.SViewToolbar this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
ht.svbase.views.SViewToolbar$SViewToolbarItem -> ht.svbase.views.z:
    java.lang.String command -> a
    java.lang.String image -> b
    java.lang.String name -> c
    ht.svbase.views.SViewToolbar this$0 -> d
ht.svbase.views.SViewToolbarAdapter -> ht.svbase.views.aa:
    android.content.Context con -> a
    java.util.Map items -> b
    android.view.LayoutInflater lif -> c
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
ht.svbase.views.SViewToolbarAdapter$ViewHolder -> ht.svbase.views.ab:
    android.widget.ImageView ivImage -> a
    android.widget.TextView tvText -> b
    ht.svbase.views.SViewToolbarAdapter this$0 -> c
ht.svbase.views.SelectFitCenter -> ht.svbase.views.ac:
    int animTimes -> a
    float[] screenCenterPnts -> b
    float[] screenPnts -> c
    ht.svbase.views.SView view -> d
    boolean OnTouchHandle(android.view.MotionEvent) -> a
    void setView(ht.svbase.views.SView) -> a
    void init(ht.svbase.views.SView) -> b
ht.svbase.views.SelectType -> ht.svbase.views.ad:
    ht.svbase.views.SelectType Edge -> a
    ht.svbase.views.SelectType handle -> b
    ht.svbase.views.SelectType Model -> c
    ht.svbase.views.SelectType Note -> d
    ht.svbase.views.SelectType Other -> e
    ht.svbase.views.SelectType PMI -> f
    ht.svbase.views.SelectType Point -> g
    ht.svbase.views.SelectType Surface -> h
    ht.svbase.views.SelectType[] ENUM$VALUES -> i
    ht.svbase.views.SelectType[] values() -> values
    ht.svbase.views.SelectType valueOf(java.lang.String) -> valueOf
ht.svbase.views.Selector -> ht.svbase.views.ae:
    ht.svbase.model.SShape currSelectedShape -> a
    boolean isSyncNative -> b
    int nativeViewIDCache -> c
    java.util.List selListeners -> d
    java.util.List shapeList -> e
    ht.svbase.views.SView sView -> f
    void addOnListener(ht.svbase.views.Selector$onListener) -> a
    void addShape(ht.svbase.model.SShape) -> a
    void addShapes(ht.svbase.model.SShape[]) -> a
    void clear() -> a
    void fireSelectEvent() -> b
    void fireSelectEvent(int) -> a
    ht.svbase.model.SShape getCurrSelectedShape() -> c
    ht.svbase.model.SShape getShape() -> d
    java.util.List getShapes() -> e
    boolean isEmpty() -> f
    void removeShape(ht.svbase.model.SShape) -> b
    void setCurrSelectedShape(ht.svbase.model.SShape) -> c
    void removeSubModel(ht.svbase.model.SModel) -> a
ht.svbase.views.Selector$onListener -> ht.svbase.views.af:
    void onHandle(java.lang.Object,int) -> a
ht.svbase.views.Ssearch -> ht.svbase.views.ag:
    int bomIDCache -> a
    int caseSensitive -> b
    int currentPos -> c
    ht.svbase.views.Selector currentSelector -> d
    boolean dataChange -> e
    java.lang.String nameCache -> f
    int operator -> g
    int operatorObject -> h
    java.util.ArrayList searchModelCache -> i
    int searchType -> j
    ht.svbase.views.IModelView view -> k
    java.util.ArrayList getAllFromNameContain(ht.svbase.model.SModel,java.lang.String) -> a
    ht.svbase.model.SShape getNextShape(ht.svbase.model.SModel,java.lang.String) -> b
    ht.svbase.model.SShape getPriShape(ht.svbase.model.SModel,java.lang.String) -> c
    java.util.ArrayList searchAllFromNameContain(java.lang.String) -> a
    ht.svbase.model.SShape searchNextShape(java.lang.String) -> b
    ht.svbase.model.SShape searchPriShape(java.lang.String) -> c
    void searchName(ht.svbase.model.SModel,java.lang.String) -> d
    boolean searchTest(ht.svbase.model.SModel,java.lang.String) -> e
ht.svbase.views.Vector -> ht.svbase.views.ah:
    float x -> a
    float y -> b
    float z -> c
ht.sview.HttpUtil -> ht.sview.a:
    boolean downLoad(java.lang.String,java.lang.String) -> a
    java.lang.String downLoad(java.lang.String) -> a
ht.sview.MainActivity -> ht.sview.MainActivity:
    android.net.Uri curUri -> a
    ht.sview.MainActivityListener mainListener -> b
    ht.svbase.views.SView sView -> c
    java.lang.String title -> d
    android.view.View titleBar -> e
    android.view.View toolBar -> f
    void AddHistoryPath(java.lang.String) -> a
    ht.sview.MainActivityListener getListener() -> a
    ht.svbase.views.SView getSView() -> b
    android.view.View getTitleBar() -> c
    android.view.View getToolbar() -> d
    void initializeNative() -> e
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void openUri(android.net.Uri) -> a
    void setButtonListener() -> f
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
    void onPause() -> onPause
    void onResume() -> onResume
ht.sview.MainActivityListener -> ht.sview.b:
    android.widget.PopupWindow popupWindow -> a
    ht.sview.dialog.AnimationDialog animationDialog -> d
    ht.sview.dialog.CameraDialog cameraDialog -> e
    android.view.View clickedView -> f
    java.util.List dialogList -> g
    ht.sview.dialog.DisplayDialog displayDialog -> h
    ht.sview.dialog.ExplosiveDialog explosiveDialog -> i
    ht.sview.dialog.FileDialog fileDialog -> j
    ht.sview.dialog.CloudDialog cloudDialog -> k
    ht.sview.dialog.GestureNoteDialog gDialog -> l
    boolean isFullWindow -> m
    ht.sview.MainActivity mainActivity -> n
    ht.sview.dialog.MeasuresDialog measuresDialog -> o
    android.os.Handler mHandler -> p
    ht.sview.dialog.NoteDialog noteDialog -> q
    ht.sview.dialog.PerspectiveDialog perspectiveDialog -> r
    ht.sview.dialog.PropertyDialog propertyDialog -> s
    ht.sview.dialog.SectionDialog sectionDialog -> t
    ht.sview.dialog.SettingDialog settingDialog -> u
    ht.svbase.views.SView sview -> v
    ht.sview.dialog.VoiceNoteDialog vDialog -> w
    ht.sview.dialog.AssemblyDialog assemblyDialog -> x
    int touchDownID -> b
    int touchUpID -> c
    void ClearGesturNodeView() -> a
    void closeGesturNodeView() -> b
    void closeVoiceNodeView() -> c
    void fullWindow(boolean) -> a
    ht.sview.dialog.AnimationDialog getAnimationDialog() -> d
    ht.sview.dialog.CameraDialog getCameraDialog() -> e
    ht.sview.dialog.DisplayDialog getFloatToolBar() -> f
    void ResizeFloatToolBar(android.view.View) -> a
    ht.sview.dialog.ExplosiveDialog getExplosiveDialog() -> g
    ht.sview.dialog.FileDialog getFileDialog() -> h
    ht.sview.dialog.CloudDialog getCloudDialog() -> i
    void ResizeFileDialog(android.view.View) -> b
    void ResizeCloudDialog(android.view.View) -> c
    ht.sview.MainActivity getMainActivity() -> j
    ht.sview.dialog.MeasuresDialog getMeasureDialog() -> k
    ht.sview.dialog.NoteDialog getNoteDialog() -> l
    ht.sview.dialog.PerspectiveDialog getPerspectiveDialog() -> m
    ht.sview.dialog.PropertyDialog getPropertyDialog() -> n
    ht.sview.dialog.SectionDialog getSectionDialog() -> o
    ht.sview.dialog.SettingDialog getSettingDialog() -> p
    void ResizeSettingDialog(android.view.View) -> d
    ht.sview.dialog.AssemblyDialog getAssemblyDialog() -> q
    void ResizeAssemblyDialog(android.view.View) -> e
    void onSizeChanged() -> r
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
    void refresh() -> s
    void setMainActivity(ht.sview.MainActivity) -> a
    void showGesturNoteView(ht.sview.note.GestureView) -> a
    void showHelp() -> t
    void showVoiceNoteView(ht.svbase.model.SModelView) -> a
    void sizeChanged() -> u
    void clearDialog() -> v
    boolean showDialog(ht.sview.dialog.SDialog,boolean) -> a
    boolean showToolDialog(int) -> a
    android.os.Handler access$0(ht.sview.MainActivityListener) -> a
ht.sview.MainActivityListener$1 -> ht.sview.c:
    ht.sview.MainActivityListener this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
ht.sview.MainActivityListener$2 -> ht.sview.d:
    ht.sview.MainActivityListener this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
ht.sview.MainActivityListener$SizeChangedScedule -> ht.sview.e:
    ht.sview.MainActivityListener this$0 -> a
    void run() -> run
ht.sview.SApplication -> ht.sview.SApplication:
    java.lang.String apkPath -> a
    java.lang.String FootFolder -> b
    ht.sview.SApplication sApplication -> c
    ht.sview.SFileManager fileManager -> d
    ht.sview.MainActivity mainActivity -> e
    ht.sview.SApplication getCurrent() -> a
    void AppExit(android.content.Context) -> a
    void finishAllActivity() -> b
    ht.sview.SFileManager getFileManager() -> c
    ht.sview.MainActivity getMainActivity() -> d
    void onCreate() -> onCreate
    void setMainActivity(ht.sview.MainActivity) -> a
    void initialize() -> e
ht.sview.SFileManager -> ht.sview.f:
    java.lang.String[] fileArray -> a
    java.io.File currentPath -> b
    int mCurCheckPosition -> c
    java.lang.String GetCloudFolder() -> a
    java.lang.String CreateLocateFolder(java.lang.String) -> a
    java.lang.String[] getFiles(java.lang.String) -> b
    void CopyAssetsFiles(java.io.File) -> a
ht.sview.SFileManager$1 -> ht.sview.g:
    ht.sview.SFileManager this$0 -> a
    int compare(java.io.File,java.io.File) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
ht.sview.SplashActivity -> ht.sview.SplashActivity:
    void onCreate(android.os.Bundle) -> onCreate
ht.sview.SplashActivity$1 -> ht.sview.h:
    ht.sview.SplashActivity this$0 -> a
    void run() -> run
ht.sview.UIHelper -> ht.sview.i:
    boolean detectOpenGLES20(android.app.Activity) -> a
    void Exit(android.content.Context) -> a
ht.sview.UIHelper$1 -> ht.sview.j:
    android.content.Context val$cont -> a
    void onClick(android.content.DialogInterface,int) -> onClick
ht.sview.UIHelper$2 -> ht.sview.k:
    void onClick(android.content.DialogInterface,int) -> onClick
ht.sview.dialog.AnimationDialog -> ht.sview.a.a:
    ht.sview.dialog.AnimationDialog$AniTimerTask aniTask -> d
    java.util.Timer aniTimer -> e
    boolean isPlaing -> f
    boolean loop -> g
    android.view.View playView -> l
    android.widget.SeekBar posBar -> m
    int position -> n
    ht.svbase.views.SView sview -> o
    android.os.Handler aniHandler -> a
    android.widget.ImageView playButton -> b
    android.view.View$OnTouchListener posTouched -> c
    void pause() -> b_
    void play() -> b
    void stop() -> c_
    void initialize() -> d
    void onClickHandle(android.view.View) -> a
    void onHide() -> e
    void onShow() -> f
    void setLayoutState() -> g
    ht.svbase.views.SView access$0(ht.sview.dialog.AnimationDialog) -> a
    void access$1(ht.sview.dialog.AnimationDialog,int) -> a
    boolean access$2(ht.sview.dialog.AnimationDialog) -> b
    void access$3(ht.sview.dialog.AnimationDialog,boolean) -> a
    android.widget.SeekBar access$4(ht.sview.dialog.AnimationDialog) -> c
    int access$5(ht.sview.dialog.AnimationDialog) -> d
ht.sview.dialog.AnimationDialog$1 -> ht.sview.a.b:
    ht.sview.dialog.AnimationDialog this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
ht.sview.dialog.AnimationDialog$2 -> ht.sview.a.c:
    ht.sview.dialog.AnimationDialog this$0 -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
ht.sview.dialog.AnimationDialog$AniTimerTask -> ht.sview.a.d:
    ht.sview.dialog.AnimationDialog this$0 -> a
    void run() -> run
ht.sview.dialog.AssemblyDialog -> ht.sview.a.e:
    ht.sview.dialog.AssemblyTreeAdapter assemblyAdapter -> a
    android.widget.ListView assemblyList -> b
    android.view.View assemblyView -> c
    android.widget.EditText editText -> d
    ht.sview.dialog.ModelViewAdapter modelAdapter -> e
    android.view.View modelView -> f
    android.widget.ListView modleViewList -> g
    android.widget.ListView noteViewList -> l
    android.widget.LinearLayout searchlLayout -> m
    android.widget.LinearLayout searchopera -> n
    ht.svbase.views.SView sview -> o
    android.view.View toolbar -> p
    int viewID -> q
    void addView() -> e_
    void onHide() -> e
    void refresh() -> d_
    void reMeasureSize() -> c
    void removeView() -> d
    void renameView() -> h
    void removeEditFocus() -> j
    void searchAll() -> k
    void searchConfig() -> s
    void searchNext() -> t
    void searchPri() -> u
    void setEditeFocus() -> v
    void showSearchView() -> w
    void initialize() -> i
    void onClickHandle(android.view.View) -> a
    void onShow() -> f
    void setLayoutState() -> g
    ht.svbase.views.SView access$0(ht.sview.dialog.AssemblyDialog) -> a
    void access$1(ht.sview.dialog.AssemblyDialog) -> b
    void access$2(ht.sview.dialog.AssemblyDialog) -> c
ht.sview.dialog.AssemblyDialog$1 -> ht.sview.a.f:
    ht.sview.dialog.AssemblyDialog this$0 -> a
    void run() -> run
ht.sview.dialog.AssemblyDialog$2 -> ht.sview.a.g:
    ht.sview.dialog.AssemblyDialog this$0 -> a
    void run() -> run
ht.sview.dialog.AssemblyDialog$3 -> ht.sview.a.h:
    int editTouchStep -> b
    ht.sview.dialog.AssemblyDialog this$0 -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
ht.sview.dialog.AssemblyTreeAdapter -> ht.sview.a.i:
    java.util.List alls -> b
    java.util.List allsCache -> c
    int collapsedIcon -> d
    android.content.Context con -> e
    int expandedIcon -> f
    boolean hasCheckBox -> g
    android.view.LayoutInflater lif -> h
    android.widget.ListView listView -> i
    ht.sview.dialog.AssemblyTreeAdapter oThis -> j
    int selectedColor -> k
    ht.svbase.views.Selector selector -> l
    ht.svbase.views.SView sview -> m
    android.os.Handler myhandler -> a
    void ExpandOrCollapse(ht.sview.dialog.AssemblyTreeNode) -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void refresh() -> a
    void setExpandLevel(int) -> a
    void addNode(ht.sview.dialog.AssemblyTreeNode) -> b
    void clearNodes() -> b
    void filterNode() -> c
    int getSelectedItemPos(ht.sview.dialog.AssemblyTreeNode) -> c
    int getSelectedModelPos(ht.svbase.model.SShape) -> a
    void loadNodes() -> d
    void scrollToPosition(int) -> b
    void scrollToSelectedItem() -> e
    void access$0(ht.sview.dialog.AssemblyTreeAdapter) -> a
    ht.svbase.views.SView access$1(ht.sview.dialog.AssemblyTreeAdapter) -> b
    ht.sview.dialog.AssemblyTreeAdapter access$2(ht.sview.dialog.AssemblyTreeAdapter) -> c
    ht.svbase.views.Selector access$3(ht.sview.dialog.AssemblyTreeAdapter) -> d
ht.sview.dialog.AssemblyTreeAdapter$1 -> ht.sview.a.j:
    ht.sview.dialog.AssemblyTreeAdapter this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
ht.sview.dialog.AssemblyTreeAdapter$2 -> ht.sview.a.k:
    ht.sview.dialog.AssemblyTreeAdapter this$0 -> a
    void onHandle(java.lang.Object,int) -> a
ht.sview.dialog.AssemblyTreeAdapter$3 -> ht.sview.a.l:
    ht.sview.dialog.AssemblyTreeAdapter this$0 -> a
    void onClick(android.view.View) -> onClick
ht.sview.dialog.AssemblyTreeAdapter$4 -> ht.sview.a.m:
    ht.sview.dialog.AssemblyTreeAdapter this$0 -> a
    void onClick(android.view.View) -> onClick
ht.sview.dialog.AssemblyTreeAdapter$5 -> ht.sview.a.n:
    ht.sview.dialog.AssemblyTreeAdapter this$0 -> a
    void onClick(android.view.View) -> onClick
ht.sview.dialog.AssemblyTreeAdapter$ViewHolder -> ht.sview.a.o:
    android.widget.CheckBox chbVisible -> a
    android.widget.ImageView ivExEc -> b
    android.widget.ImageView ivIcon -> c
    int position -> d
    android.widget.TextView tvText -> e
    ht.sview.dialog.AssemblyTreeAdapter this$0 -> f
ht.sview.dialog.AssemblyTreeNode -> ht.sview.a.p:
    java.util.List children -> a
    boolean hasCheckBox -> b
    int icon -> c
    boolean isChecked -> d
    boolean isExpanded -> e
    boolean isVisibled -> f
    ht.svbase.model.SModel model -> g
    ht.sview.dialog.AssemblyTreeNode parent -> h
    void add(ht.sview.dialog.AssemblyTreeNode) -> a
    int getIcon() -> a
    int getLevel() -> b
    ht.svbase.model.SModel getModel() -> c
    ht.sview.dialog.AssemblyTreeNode getParent() -> d
    java.lang.String getText() -> e
    boolean hasCheckBox() -> f
    boolean isExpanded() -> g
    boolean isLeaf() -> h
    boolean isParentCollapsed() -> i
    boolean isRoot() -> j
    boolean isSelected() -> k
    void setExpanded(boolean) -> a
    void setIcon(int) -> a
    void setParent(ht.sview.dialog.AssemblyTreeNode) -> b
ht.sview.dialog.CameraDialog -> ht.sview.a.q:
    ht.svbase.views.SView sview -> a
    void initialize() -> f_
    void onClickHandle(android.view.View) -> a
    void savePreview() -> d
ht.sview.dialog.CloudDialog -> ht.sview.a.r:
    ht.svbase.views.SView sview -> l
    java.lang.String filename -> a
    java.lang.String localpath -> b
    java.lang.String fileurl -> c
    android.app.ProgressDialog progressDialog -> d
    java.lang.String address -> e
    java.lang.String listaddress -> f
    java.util.List explosiveStrings -> g
    void setFileList(java.util.ArrayList) -> a
    void initialize() -> g_
    void startDownload() -> d
    void showProgressDialog() -> h
    void closeProgressDialog() -> i
    void showMessage(java.lang.String) -> a
    void openFile(java.lang.String) -> b
    void showBrowers() -> j
    void Refrush() -> k
ht.sview.dialog.CloudDialog$1 -> ht.sview.a.s:
    ht.sview.dialog.CloudDialog this$0 -> a
    void onClick(android.view.View) -> onClick
ht.sview.dialog.CloudDialog$2 -> ht.sview.a.t:
    ht.sview.dialog.CloudDialog this$0 -> a
    void onClick(android.view.View) -> onClick
ht.sview.dialog.CloudDialog$3 -> ht.sview.a.u:
    ht.sview.dialog.CloudDialog this$0 -> a
    void onClick(android.view.View) -> onClick
ht.sview.dialog.CloudDialog$4 -> ht.sview.a.v:
    ht.sview.dialog.CloudDialog this$0 -> a
    void onClick(android.view.View) -> onClick
ht.sview.dialog.CloudDialog$5 -> ht.sview.a.w:
    ht.sview.dialog.CloudDialog this$0 -> a
    void onClick(android.view.View) -> onClick
ht.sview.dialog.CloudDialog$6 -> ht.sview.a.x:
    ht.sview.dialog.CloudDialog this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    ht.sview.dialog.CloudDialog access$0(ht.sview.dialog.CloudDialog$6) -> a
ht.sview.dialog.CloudDialog$6$1 -> ht.sview.a.y:
    ht.sview.dialog.CloudDialog$6 this$1 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
ht.sview.dialog.CloudDialog$6$2 -> ht.sview.a.z:
    ht.sview.dialog.CloudDialog$6 this$1 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
ht.sview.dialog.CloudDialog$CloudFileDownload -> ht.sview.a.aa:
    ht.sview.dialog.CloudDialog cloudDialog -> b
    java.lang.String localpath -> c
    ht.sview.dialog.CloudDialog this$0 -> a
    java.lang.String doInBackground(java.lang.String[]) -> a
    void onPostExecute(java.lang.String) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
ht.sview.dialog.CloudFile -> ht.sview.a.ab:
    java.lang.String id -> a
    java.lang.String name -> b
    java.lang.String uri -> c
    java.lang.String filetype -> d
    java.lang.String preimg -> e
    java.lang.String size -> f
    void setID(java.lang.String) -> a
    java.lang.String getName() -> a
    void setName(java.lang.String) -> b
    java.lang.String getUri() -> b
    void setUri(java.lang.String) -> c
    java.lang.String getType() -> c
    java.lang.String getImage() -> d
    void setImage(java.lang.String) -> d
    java.lang.String getSize() -> e
    void setSize(java.lang.String) -> e
ht.sview.dialog.CloudFileListAdapter -> ht.sview.a.ac:
    java.util.List ExtFilter -> a
    android.content.Context context -> b
    java.util.List fileList -> c
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
ht.sview.dialog.CloudFileListAdapter$1 -> ht.sview.a.ad:
ht.sview.dialog.CloudFilesDownload -> ht.sview.a.ae:
    ht.sview.dialog.CloudDialog dialog -> a
    java.lang.String url -> b
    void download(ht.sview.dialog.CloudDialog,java.lang.String) -> a
    java.lang.String doInBackground(java.lang.String[]) -> a
    void onPostExecute(java.lang.String) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
ht.sview.dialog.CloudImageDownload -> ht.sview.a.af:
    android.widget.ImageView imageView -> a
    java.lang.String localpath -> b
    void SetImage(android.widget.ImageView,java.lang.String) -> a
    void SetImage(android.widget.ImageView,java.lang.String,java.lang.String) -> a
    java.lang.String doInBackground(java.lang.String[]) -> a
    void onPostExecute(java.lang.String) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
ht.sview.dialog.DisplayDialog -> ht.sview.a.ag:
    ht.sview.dialog.ESelector eSelector -> c
    ht.sview.dialog.ESelector$onListener eselectorListener -> d
    boolean isExactSelect -> e
    ht.svbase.views.SelectType selectedType -> f
    ht.svbase.views.Selector selector -> g
    ht.svbase.views.SView sView -> l
    java.lang.String[] filterType -> a
    ht.svbase.views.Selector$onListener selectorListener -> b
    void hideHandle() -> d
    void restoreModel() -> h
    void setTransparentAlpha() -> i
    void showExchange() -> j
    void showExchange(ht.svbase.model.SModel) -> a
    void showFilter() -> k
    void transparentHandle() -> s
    void initialize() -> h_
    void onClickHandle(android.view.View) -> a
    void handleClick(android.view.View) -> b
    void onHide() -> e
    void setLayoutState() -> g
    ht.svbase.views.SView access$0(ht.sview.dialog.DisplayDialog) -> a
    void access$1(ht.sview.dialog.DisplayDialog) -> b
    ht.svbase.views.Selector access$2(ht.sview.dialog.DisplayDialog) -> c
    void access$3(ht.sview.dialog.DisplayDialog,ht.svbase.views.SelectType) -> a
    ht.svbase.views.SelectType access$4(ht.sview.dialog.DisplayDialog) -> d
ht.sview.dialog.DisplayDialog$1 -> ht.sview.a.ah:
    float lastX -> a
    float lastY -> b
    ht.sview.dialog.DisplayDialog this$0 -> c
    boolean onHandle(java.lang.Object,ht.sview.dialog.ESelector$ESelectorEvent) -> a
ht.sview.dialog.DisplayDialog$2 -> ht.sview.a.ai:
    ht.sview.dialog.DisplayDialog this$0 -> a
    void onHandle(java.lang.Object,int) -> a
ht.sview.dialog.DisplayDialog$3 -> ht.sview.a.aj:
    ht.sview.dialog.DisplayDialog this$0 -> a
    void onClick(android.view.View) -> onClick
ht.sview.dialog.DisplayDialog$4 -> ht.sview.a.ak:
    ht.sview.dialog.DisplayDialog this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
ht.sview.dialog.DisplayDialog$5 -> ht.sview.a.al:
    ht.sview.dialog.DisplayDialog this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
ht.sview.dialog.DisplayDialog$6 -> ht.sview.a.am:
    ht.sview.dialog.DisplayDialog this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
ht.sview.dialog.ESelector -> ht.sview.a.an:
    android.view.View backHandle -> a
    ht.sview.dialog.ESelectorGestureListener eSelectorGestureListener -> b
    android.view.GestureDetector gestureDetector -> c
    android.view.View$OnTouchListener handleTouchListener -> d
    android.widget.ImageButton selectHandle -> e
    ht.sview.dialog.ESelector$ESelectorEvent selectorEvent -> f
    int selectorHandlerWidth -> g
    java.util.List selListeners -> h
    ht.svbase.views.SView sView -> i
    void addOnListener(ht.sview.dialog.ESelector$onListener) -> a
    void fireEselectorEvent(ht.sview.dialog.ESelector$ESelectorEvent) -> a
    void hide() -> a
    void initial() -> b
    void show() -> c
    void createHandle() -> d
    ht.sview.dialog.ESelector$ESelectorEvent access$0(ht.sview.dialog.ESelector) -> a
    android.view.View access$1(ht.sview.dialog.ESelector) -> b
    ht.svbase.views.SView access$2(ht.sview.dialog.ESelector) -> c
    android.view.GestureDetector access$3(ht.sview.dialog.ESelector) -> d
    ht.sview.dialog.ESelectorGestureListener access$4(ht.sview.dialog.ESelector) -> e
ht.sview.dialog.ESelector$1 -> ht.sview.a.ao:
    float lastX -> a
    float lastY -> b
    ht.sview.dialog.ESelector this$0 -> c
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
ht.sview.dialog.ESelector$ESelectorEvent -> ht.sview.a.ap:
    int clickType -> a
    android.view.MotionEvent motionEvent -> b
    float selX -> c
    float selY -> d
    int getClickType() -> a
    android.view.MotionEvent getMotionEvent() -> b
    float getSelX() -> c
    float getSelY() -> d
    void restore() -> e
    void setClickType(int) -> a
    void setMotionEvent(android.view.MotionEvent) -> a
    void setSelX(float) -> a
    void setSelY(float) -> b
ht.sview.dialog.ESelector$onListener -> ht.sview.a.aq:
    boolean onHandle(java.lang.Object,ht.sview.dialog.ESelector$ESelectorEvent) -> a
ht.sview.dialog.ESelectorGestureListener -> ht.sview.a.ar:
    int clickType -> b
    ht.sview.dialog.ESelector eSelector -> c
    int step -> a
    int getClickType() -> a
    boolean onDoubleTap(android.view.MotionEvent) -> onDoubleTap
    boolean onDoubleTapEvent(android.view.MotionEvent) -> onDoubleTapEvent
    boolean onDown(android.view.MotionEvent) -> onDown
    boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onFling
    void onLongPress(android.view.MotionEvent) -> onLongPress
    boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onScroll
    void onShowPress(android.view.MotionEvent) -> onShowPress
    boolean onSingleTapConfirmed(android.view.MotionEvent) -> onSingleTapConfirmed
    boolean onSingleTapUp(android.view.MotionEvent) -> onSingleTapUp
    void setClickType(int) -> a
ht.sview.dialog.ExplosiveDialog -> ht.sview.a.as:
    ht.svbase.views.Selector selector -> l
    ht.svbase.views.SView sview -> m
    java.util.List allPathList -> a
    java.util.List allViewNameList -> b
    int curShowingModeViewId -> c
    java.lang.String curViewName -> d
    android.widget.AdapterView$OnItemSelectedListener explosiveListener -> e
    java.lang.String selectedViewInfoPath -> f
    ht.svbase.views.Selector$onListener selectorListener -> g
    void showExpView() -> h
    void initialize() -> i_
    void onClickHandle(android.view.View) -> a
    void onExplosiveSel(android.view.View) -> b
    void onHide() -> e
    void selHandle() -> d
    void setLayoutState() -> g
    void access$0(ht.sview.dialog.ExplosiveDialog) -> a
ht.sview.dialog.ExplosiveDialog$1 -> ht.sview.a.at:
    ht.sview.dialog.ExplosiveDialog this$0 -> a
    void onItemSelected(android.widget.AdapterView,android.view.View,int,long) -> onItemSelected
    void onNothingSelected(android.widget.AdapterView) -> onNothingSelected
ht.sview.dialog.ExplosiveDialog$2 -> ht.sview.a.au:
    ht.sview.dialog.ExplosiveDialog this$0 -> a
    void onHandle(java.lang.Object,int) -> a
ht.sview.dialog.ExplosiveDialog$3 -> ht.sview.a.av:
    ht.sview.dialog.ExplosiveDialog this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
    ht.sview.dialog.ExplosiveDialog access$0(ht.sview.dialog.ExplosiveDialog$3) -> a
ht.sview.dialog.ExplosiveDialog$3$1 -> ht.sview.a.aw:
    ht.sview.dialog.ExplosiveDialog$3 this$1 -> a
    void run() -> run
ht.sview.dialog.ExplosiveDialog$4 -> ht.sview.a.ax:
    ht.sview.dialog.ExplosiveDialog this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
ht.sview.dialog.ExplosiveDialog$5 -> ht.sview.a.ay:
    ht.sview.dialog.ExplosiveDialog this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
ht.sview.dialog.FileDialog -> ht.sview.a.az:
    ht.svbase.views.SView sview -> f
    java.lang.String curPath -> a
    java.util.List explosiveStrings -> b
    java.lang.String[] files -> c
    java.lang.String footPath -> d
    java.lang.String localPath -> e
    void setFileList(java.lang.String) -> a
    void showHistory() -> j_
    void initialize() -> d
ht.sview.dialog.FileDialog$1 -> ht.sview.a.ba:
    ht.sview.dialog.FileDialog this$0 -> a
    void onClick(android.view.View) -> onClick
ht.sview.dialog.FileDialog$2 -> ht.sview.a.bb:
    ht.sview.dialog.FileDialog this$0 -> a
    void onClick(android.view.View) -> onClick
ht.sview.dialog.FileDialog$3 -> ht.sview.a.bc:
    ht.sview.dialog.FileDialog this$0 -> a
    void onClick(android.view.View) -> onClick
ht.sview.dialog.FileDialog$4 -> ht.sview.a.bd:
    ht.sview.dialog.FileDialog this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
ht.sview.dialog.FileListAdapter -> ht.sview.a.be:
    java.util.List ExtFilter -> a
    boolean IsShowPreview -> b
    android.content.Context context -> c
    java.util.List fileList -> d
    java.lang.String formetFileSize(long) -> a
    int getCount() -> getCount
    long getFileSize(java.io.File) -> a
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
ht.sview.dialog.FileListAdapter$1 -> ht.sview.a.bf:
ht.sview.dialog.GestureNoteDialog -> ht.sview.a.bg:
    int colorIndex -> b
    ht.sview.note.GestureView gview -> c
    float textNoteDefaultSize -> d
    ht.svbase.views.SView sview -> a
    ht.sview.note.GestureView getGestureView() -> k_
    void setGestureView(ht.sview.note.GestureView) -> a
    void initialize() -> d
    void onClickHandle(android.view.View) -> a
    void onHide() -> e
    void onShow() -> f
    void setColor(int) -> a
    void setLayoutState() -> g
ht.sview.dialog.MeasuresDialog -> ht.sview.a.bh:
    boolean isshow -> a
    ht.svbase.views.MeasureManager measureMgr -> b
    ht.svbase.views.SView sview -> c
    void Show() -> a
    void initialize() -> d
    void onClickHandle(android.view.View) -> a
    void onHide() -> e
    void setLayoutState() -> g
ht.sview.dialog.ModelViewAdapter -> ht.sview.a.bi:
    android.content.Context context -> d
    ht.svbase.model.SModelView curModelView -> e
    android.view.LayoutInflater lif -> f
    int selectedColor -> g
    int selectedID -> h
    ht.svbase.views.SView sview -> a
    java.util.List viewList -> b
    android.os.Handler myhandler -> c
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    ht.svbase.model.SModelView getSelModelView() -> a
    int getSelModelViewID() -> b
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void refresh() -> c
    void initBaseView() -> e
    ht.svbase.model.SMatrix SMatrixfromParas(ht.svbase.views.SScene,float,float,float,float) -> a
    void init() -> d
    void access$0(ht.sview.dialog.ModelViewAdapter,int) -> a
ht.sview.dialog.ModelViewAdapter$1 -> ht.sview.a.bj:
    ht.sview.dialog.ModelViewAdapter this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
ht.sview.dialog.ModelViewAdapter$2 -> ht.sview.a.bk:
    ht.sview.dialog.ModelViewAdapter this$0 -> a
    void onClick(android.view.View) -> onClick
ht.sview.dialog.ModelViewAdapter$3 -> ht.sview.a.bl:
    ht.sview.dialog.ModelViewAdapter this$0 -> a
    void onHandle(ht.svbase.views.SView,ht.svbase.views.SViewEvent) -> a
ht.sview.dialog.ModelViewAdapter$ViewHolder -> ht.sview.a.bm:
    android.widget.ImageView iconView -> a
    android.widget.TextView nameView -> b
    int position -> c
    int viewID -> d
    ht.sview.dialog.ModelViewAdapter this$0 -> e
ht.sview.dialog.NoteDialog -> ht.sview.a.bn:
    void initialize() -> d
    void onClickHandle(android.view.View) -> a
ht.sview.dialog.PerspectiveDialog -> ht.sview.a.bo:
    boolean isshow -> a
    ht.svbase.views.SView sview -> b
    void Show() -> a
    void initialize() -> d
    void onClickHandle(android.view.View) -> a
    void setLayoutState() -> g
ht.sview.dialog.PropertyDialog -> ht.sview.a.bp:
    ht.svbase.views.Selector selector -> b
    ht.svbase.views.SView sview -> c
    android.os.Handler myhandler -> a
    void addProperties(java.util.Map) -> a
    void addProperty(java.lang.String,java.lang.String) -> a
    void clearProperties() -> d
    void initialize() -> h
    ht.svbase.views.SView access$0(ht.sview.dialog.PropertyDialog) -> a
    ht.svbase.views.Selector access$1(ht.sview.dialog.PropertyDialog) -> b
ht.sview.dialog.PropertyDialog$1 -> ht.sview.a.bq:
    ht.sview.dialog.PropertyDialog this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
ht.sview.dialog.PropertyDialog$2 -> ht.sview.a.br:
    ht.sview.dialog.PropertyDialog this$0 -> a
    android.view.View val$titleView -> b
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
ht.sview.dialog.PropertyDialog$3 -> ht.sview.a.bs:
    ht.sview.dialog.PropertyDialog this$0 -> a
    void onHandle(java.lang.Object,int) -> a
ht.sview.dialog.PropertyDialog$4 -> ht.sview.a.bt:
    ht.sview.dialog.PropertyDialog this$0 -> a
    void onClick(android.view.View) -> onClick
ht.sview.dialog.SDialog -> ht.sview.a.bu:
    android.view.View anchor -> a
    android.content.Context context -> b
    int gravity -> c
    int height -> d
    boolean isSetAnchorState -> e
    boolean isShow -> f
    android.widget.PopupWindow popupWindow -> g
    ht.sview.dialog.SDialog$TouchListener touchlistener -> l
    boolean useDropDown -> m
    int width -> n
    int x -> o
    int y -> p
    android.view.View dialog -> h
    boolean isFocusable -> i
    boolean isOutTouch -> j
    android.view.View parent -> k
    void addClickHandle(android.view.View) -> c
    android.content.Context getContext() -> l
    int getHeight() -> m
    int getWidth() -> n
    void Hide() -> o
    boolean isShow() -> p
    void refresh() -> d_
    void reMeasureSize() -> c
    void setContext(android.content.Context) -> a
    void setDropDown(android.view.View,int,int,boolean) -> a
    void setLocation(int,int,int,boolean) -> a
    void setLocation(android.view.View,int,int,int,boolean) -> a
    void setOutsideTouchable(boolean) -> a
    void setParent(android.view.View) -> d
    void setSize(int,int) -> a
    void setTouchListener() -> q
    void Show() -> a
    android.widget.PopupWindow getPopupWindow() -> r
    void onClickHandle(android.view.View) -> a
    void onHide() -> e
    void onShow() -> f
    void onTouchDownHandle(android.view.View) -> e
    void setLayoutState() -> g
    boolean access$0(ht.sview.dialog.SDialog) -> a
    android.view.View access$1(ht.sview.dialog.SDialog) -> b
ht.sview.dialog.SDialog$1 -> ht.sview.a.bv:
    ht.sview.dialog.SDialog this$0 -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
ht.sview.dialog.SDialog$2 -> ht.sview.a.bw:
    ht.sview.dialog.SDialog this$0 -> a
    void onDismiss() -> onDismiss
ht.sview.dialog.SDialog$TouchListener -> ht.sview.a.bx:
    ht.sview.dialog.SDialog this$0 -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
ht.sview.dialog.SectionDialog -> ht.sview.a.by:
    int direction -> b
    int percentage -> c
    boolean reversal -> d
    ht.svbase.views.SView sview -> e
    android.widget.SeekBar$OnSeekBarChangeListener posChanged -> a
    void closeSection() -> d
    void showSection() -> h
    void upDataView() -> j
    void initialize() -> i
    void onClickHandle(android.view.View) -> a
    void onHide() -> e
    void onShow() -> f
    void setLayoutState() -> g
    void access$0(ht.sview.dialog.SectionDialog,int) -> a
ht.sview.dialog.SectionDialog$1 -> ht.sview.a.bz:
    ht.sview.dialog.SectionDialog this$0 -> a
    void onProgressChanged(android.widget.SeekBar,int,boolean) -> onProgressChanged
    void onStartTrackingTouch(android.widget.SeekBar) -> onStartTrackingTouch
    void onStopTrackingTouch(android.widget.SeekBar) -> onStopTrackingTouch
ht.sview.dialog.SeekBarDialog -> ht.sview.a.ca:
    android.widget.Button btnCancel -> a
    android.widget.Button btnOK -> b
    android.content.Context curContext -> c
    android.view.View$OnClickListener curOkListener -> d
    android.widget.SeekBar seekbar -> e
    android.widget.TextView tvSeekbarLabel -> f
    int width -> g
    int height -> h
    int getProgress() -> a
    void InitDialog(java.lang.String) -> a
    void setProgress(int) -> a
ht.sview.dialog.SeekBarDialog$1 -> ht.sview.a.cb:
    ht.sview.dialog.SeekBarDialog this$0 -> a
    void onClick(android.view.View) -> onClick
ht.sview.dialog.SeekBarDialog$2 -> ht.sview.a.cc:
    ht.sview.dialog.SeekBarDialog this$0 -> a
    void onProgressChanged(android.widget.SeekBar,int,boolean) -> onProgressChanged
    void onStartTrackingTouch(android.widget.SeekBar) -> onStartTrackingTouch
    void onStopTrackingTouch(android.widget.SeekBar) -> onStopTrackingTouch
ht.sview.dialog.SeekBarDialog$3 -> ht.sview.a.cd:
    ht.sview.dialog.SeekBarDialog this$0 -> a
    void onClick(android.view.View) -> onClick
ht.sview.dialog.SettingDialog -> ht.sview.a.ce:
    ht.sview.MainActivityListener mainlistener -> a
    boolean isSetLayoutState -> l
    android.widget.CompoundButton$OnCheckedChangeListener checkListener -> b
    android.view.View parent -> c
    java.util.List removeModeList -> d
    java.util.List removeSizeList -> e
    android.widget.AdapterView$OnItemSelectedListener spinnerListener -> f
    ht.svbase.views.SView sview -> g
    void SetDefault() -> d
    void initialize() -> h
    void onHide() -> e
    void setLayoutState() -> g
    boolean access$0(ht.sview.dialog.SettingDialog) -> a
ht.sview.dialog.SettingDialog$1 -> ht.sview.a.cf:
    ht.sview.dialog.SettingDialog this$0 -> a
    void onCheckedChanged(android.widget.CompoundButton,boolean) -> onCheckedChanged
ht.sview.dialog.SettingDialog$2 -> ht.sview.a.cg:
    ht.sview.dialog.SettingDialog this$0 -> a
    void onItemSelected(android.widget.AdapterView,android.view.View,int,long) -> onItemSelected
    void onNothingSelected(android.widget.AdapterView) -> onNothingSelected
ht.sview.dialog.SettingDialog$3 -> ht.sview.a.ch:
    ht.sview.dialog.SettingDialog this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
ht.sview.dialog.SettingDialog$4 -> ht.sview.a.ci:
    ht.sview.dialog.SettingDialog this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
ht.sview.dialog.SettingDialog$5 -> ht.sview.a.cj:
    ht.sview.dialog.SettingDialog this$0 -> a
    void onClick(android.view.View) -> onClick
ht.sview.dialog.SettingDialog$6 -> ht.sview.a.ck:
    ht.sview.dialog.SettingDialog this$0 -> a
    void onClick(android.view.View) -> onClick
ht.sview.dialog.VoiceNoteDialog -> ht.sview.a.cl:
    int noteID -> a
    ht.sview.dialog.VoiceNoteDialog$NoteCommand command -> c
    ht.svbase.model.SModelView curModelView -> d
    ht.svbase.model.SNote curNote -> e
    ht.svbase.model.SNote curSelectedNote -> f
    android.view.View handlerBack -> g
    int handlerWidth -> l
    boolean isSingleFinger -> m
    long lastUpdateTime -> n
    ht.svbase.model.SLine line -> o
    ht.svbase.model.SModelView modelView -> p
    android.media.MediaPlayer mPlayer -> q
    android.media.MediaRecorder mRecorder -> r
    int noteHandleId1 -> s
    int noteHandleId2 -> t
    java.util.HashMap noteMap -> u
    int noteStep -> v
    java.lang.String notetext -> w
    ht.sview.dialog.VoiceNoteDialog$NoteType notetype -> x
    android.app.Dialog playDialog -> y
    ht.svbase.model.SPoint point1 -> z
    ht.svbase.model.SPoint point2 -> A
    int pointingType -> B
    float previousX -> C
    float previousY -> D
    int selHandleId -> E
    ht.svbase.views.SView sview -> F
    ht.svbase.model.SColor textNoteDefaultColor -> G
    float textNoteDefaultSize -> H
    boolean textNoteEditting -> I
    ht.svbase.model.SColor textNoteSelectedColor -> J
    int updateDelayTime -> K
    java.util.HashMap voiceMap -> L
    boolean isPlaying -> b
    void createRecord(android.view.MotionEvent) -> a
    void createTextNoteView() -> d
    void getNoteText() -> h
    void initialize() -> i
    void removeVoiceNote(ht.svbase.model.SVoiceNote) -> a
    void setModelView(ht.svbase.model.SModelView) -> a
    void startPlay(ht.svbase.model.SVoiceNote) -> b
    void stopPlay() -> j
    void stopRecord(ht.svbase.model.SVoiceNote,boolean) -> a
    void closeView() -> k
    boolean editTextNote(android.view.MotionEvent) -> c
    void editTextNoteToXY(float,float) -> a
    void removeTextNoteHandle() -> s
    void setRecordPrompt(java.lang.String) -> a
    void setTextNoteSelected(ht.svbase.model.SNote,boolean) -> a
    void createTextNote(android.view.MotionEvent) -> b
    void onClickHandle(android.view.View) -> a
    void onHide() -> e
    void setLayoutState() -> g
    boolean access$0(ht.sview.dialog.VoiceNoteDialog) -> a
    boolean access$1(ht.sview.dialog.VoiceNoteDialog,android.view.MotionEvent) -> a
    void access$2(ht.sview.dialog.VoiceNoteDialog,boolean) -> a
    void access$3(ht.sview.dialog.VoiceNoteDialog,float) -> a
    void access$4(ht.sview.dialog.VoiceNoteDialog,float) -> b
    ht.svbase.views.SView access$5(ht.sview.dialog.VoiceNoteDialog) -> b
    float access$6(ht.sview.dialog.VoiceNoteDialog) -> c
    float access$7(ht.sview.dialog.VoiceNoteDialog) -> d
    boolean access$8(ht.sview.dialog.VoiceNoteDialog) -> e
    ht.svbase.model.SNote access$9(ht.sview.dialog.VoiceNoteDialog) -> f
    void access$10(ht.sview.dialog.VoiceNoteDialog,ht.svbase.model.SNote,boolean) -> a
    java.util.HashMap access$11(ht.sview.dialog.VoiceNoteDialog) -> g
    java.util.HashMap access$12(ht.sview.dialog.VoiceNoteDialog) -> h
    int access$13(ht.sview.dialog.VoiceNoteDialog) -> i
    void access$14(ht.sview.dialog.VoiceNoteDialog,ht.svbase.model.SNote) -> a
    void access$15(ht.sview.dialog.VoiceNoteDialog,boolean) -> b
    ht.sview.dialog.VoiceNoteDialog$NoteType access$16(ht.sview.dialog.VoiceNoteDialog) -> j
    void access$17(ht.sview.dialog.VoiceNoteDialog,java.lang.String) -> a
    android.app.Dialog access$18(ht.sview.dialog.VoiceNoteDialog) -> k
ht.sview.dialog.VoiceNoteDialog$1 -> ht.sview.a.cm:
    ht.sview.dialog.VoiceNoteDialog this$0 -> a
    ht.svbase.model.SVoiceNote val$vNote -> b
    void onClick(android.content.DialogInterface,int) -> onClick
ht.sview.dialog.VoiceNoteDialog$2 -> ht.sview.a.cn:
    ht.sview.dialog.VoiceNoteDialog this$0 -> a
    ht.svbase.model.SVoiceNote val$vNote -> b
    void onClick(android.content.DialogInterface,int) -> onClick
ht.sview.dialog.VoiceNoteDialog$3 -> ht.sview.a.co:
    ht.sview.dialog.VoiceNoteDialog this$0 -> a
    android.widget.EditText val$edit -> b
    void onClick(android.content.DialogInterface,int) -> onClick
ht.sview.dialog.VoiceNoteDialog$4 -> ht.sview.a.cp:
    ht.sview.dialog.VoiceNoteDialog this$0 -> a
    android.widget.EditText val$edit -> b
    void onClick(android.content.DialogInterface,int) -> onClick
ht.sview.dialog.VoiceNoteDialog$5 -> ht.sview.a.cq:
    ht.sview.dialog.VoiceNoteDialog this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
ht.sview.dialog.VoiceNoteDialog$6 -> ht.sview.a.cr:
    ht.sview.dialog.VoiceNoteDialog this$0 -> a
    void onCompletion(android.media.MediaPlayer) -> onCompletion
ht.sview.dialog.VoiceNoteDialog$NoteCommand -> ht.sview.a.cs:
    ht.sview.dialog.VoiceNoteDialog this$0 -> a
    boolean onTouchHandle(java.lang.Object,android.view.MotionEvent) -> a
    void onAsyncExecute(java.lang.String[]) -> a
ht.sview.dialog.VoiceNoteDialog$NoteType -> ht.sview.a.ct:
    ht.sview.dialog.VoiceNoteDialog$NoteType None -> a
    ht.sview.dialog.VoiceNoteDialog$NoteType TextNote -> b
    ht.sview.dialog.VoiceNoteDialog$NoteType VoiceNote -> c
    ht.sview.dialog.VoiceNoteDialog$NoteType[] ENUM$VALUES -> d
    ht.sview.dialog.VoiceNoteDialog$NoteType[] values() -> values
    ht.sview.dialog.VoiceNoteDialog$NoteType valueOf(java.lang.String) -> valueOf
ht.sview.note.GestureOverlayView -> ht.sview.b.a:
    float TOUCH_TOLERANCE -> a
    ht.sview.note.GestureStroke curStroke -> b
    float curveEndX -> c
    float curveEndY -> d
    ht.sview.note.GestureView gView -> e
    boolean isDrawing -> f
    int mAlpha -> g
    int mColor -> h
    int mInvalidateExtraBorder -> i
    android.graphics.Rect mInvalidRect -> j
    android.graphics.Paint mPaint -> k
    float mStrokeWidth -> l
    float preX -> m
    float preY -> n
    boolean dispatchTouchEvent(android.view.MotionEvent) -> dispatchTouchEvent
    void draw(android.graphics.Canvas) -> draw
    ht.sview.note.GestureView getGestureView() -> getGestureView
    int getStrokeAlpha() -> getStrokeAlpha
    int getStrokeColor() -> getStrokeColor
    float getStrokeWidth() -> getStrokeWidth
    void init() -> a
    void reSetStrokeColor() -> b
    void setGestureView(ht.sview.note.GestureView) -> setGestureView
    void setStrokeAlpha(int) -> setStrokeAlpha
    void setStrokeColor(int) -> setStrokeColor
    void setStrokeWidth(float) -> setStrokeWidth
    void drawGestureStroke(android.graphics.Canvas,ht.sview.note.GestureStroke) -> a
    boolean processEvent(android.view.MotionEvent) -> a
    void touchDown(android.view.MotionEvent) -> b
    android.graphics.Rect touchMove(android.view.MotionEvent) -> c
    void touchUp(android.view.MotionEvent,boolean) -> a
ht.sview.note.GestureStroke -> ht.sview.b.b:
    int color -> a
    android.graphics.Path path -> b
    java.util.ArrayList points -> c
    java.lang.String pointsToString() -> a
ht.sview.note.GestureView -> ht.sview.b.c:
    java.lang.String filePath -> a
    ht.sview.note.GestureOverlayView innerView -> b
    java.util.ArrayList strokeList -> c
    ht.sview.note.GestureOverlayView getOverlayView() -> e
    java.util.ArrayList getStrokes() -> f
    void removeLast() -> g
    void save() -> h
    void save(java.lang.String) -> b
